
PizzaOvenXmegaA4_v2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a8c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000124  00802000  00001a8c  00001b20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000aa  00802124  00802124  00001c44  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001c44  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c74  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  00001cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000638c  00000000  00000000  00001ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002e2c  00000000  00000000  00008260  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000196c  00000000  00000000  0000b08c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000668  00000000  00000000  0000c9f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000349f  00000000  00000000  0000d060  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ed1  00000000  00000000  000104ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f0  00000000  00000000  000123d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__ctors_end>
       4:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
       8:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
       c:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      10:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      14:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      18:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      1c:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      20:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      24:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      28:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      2c:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      30:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      34:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      38:	0c 94 77 09 	jmp	0x12ee	; 0x12ee <__vector_14>
      3c:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      40:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      44:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      48:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      4c:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      50:	0c 94 c9 09 	jmp	0x1392	; 0x1392 <__vector_20>
      54:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      58:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      5c:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      60:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      64:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      68:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      6c:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      70:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      74:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      78:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      7c:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      80:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      84:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      88:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      8c:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      90:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      94:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      98:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      9c:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      a0:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      a4:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      a8:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      ac:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      b0:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      b4:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      b8:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      bc:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      c0:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      c4:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      c8:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      cc:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      d0:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      d4:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      d8:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      dc:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      e0:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      e4:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      e8:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      ec:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      f0:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      f4:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      f8:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      fc:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     100:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     104:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     108:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     10c:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     110:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     114:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     118:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     11c:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     120:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     124:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     128:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     12c:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     130:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     134:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     138:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     13c:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     140:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     144:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     148:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     14c:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     150:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     154:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     158:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     15c:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     160:	0c 94 08 09 	jmp	0x1210	; 0x1210 <__vector_88>
     164:	0c 94 42 09 	jmp	0x1284	; 0x1284 <__vector_89>
     168:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     16c:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     170:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     174:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     178:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     17c:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     180:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     184:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     188:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     18c:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     190:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     194:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     198:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     19c:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     1a0:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     1a4:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     1a8:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     1ac:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     1b0:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     1b4:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     1b8:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     1bc:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     1c0:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     1c4:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     1c8:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     1cc:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     1d0:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     1d4:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     1d8:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     1dc:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     1e0:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     1e4:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     1e8:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     1ec:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     1f0:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     1f4:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     1f8:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     1fc:	d5 05       	cpc	r29, r5
     1fe:	e4 05       	cpc	r30, r4
     200:	e9 05       	cpc	r30, r9
     202:	ee 05       	cpc	r30, r14
     204:	f3 05       	cpc	r31, r3
     206:	1d 06       	cpc	r1, r29
     208:	47 06       	cpc	r4, r23
     20a:	51 06       	cpc	r5, r17
     20c:	5e 06       	cpc	r5, r30
     20e:	6e 06       	cpc	r6, r30

00000210 <__trampolines_start>:
     210:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <data_received_handler+0x6c>
     214:	0c 94 47 06 	jmp	0xc8e	; 0xc8e <data_received_handler+0x132>
     218:	0c 94 e9 05 	jmp	0xbd2	; 0xbd2 <data_received_handler+0x76>
     21c:	0c 94 d5 05 	jmp	0xbaa	; 0xbaa <data_received_handler+0x4e>
     220:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <data_received_handler+0xde>
     224:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <data_received_handler+0x8a>
     228:	0c 94 51 06 	jmp	0xca2	; 0xca2 <data_received_handler+0x146>
     22c:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <data_received_handler+0x80>
     230:	0c 94 5e 06 	jmp	0xcbc	; 0xcbc <data_received_handler+0x160>
     234:	0c 94 6e 06 	jmp	0xcdc	; 0xcdc <data_received_handler+0x180>

00000238 <__ctors_end>:
     238:	11 24       	eor	r1, r1
     23a:	1f be       	out	0x3f, r1	; 63
     23c:	cf ef       	ldi	r28, 0xFF	; 255
     23e:	cd bf       	out	0x3d, r28	; 61
     240:	df e3       	ldi	r29, 0x3F	; 63
     242:	de bf       	out	0x3e, r29	; 62
     244:	00 e0       	ldi	r16, 0x00	; 0
     246:	0c bf       	out	0x3c, r16	; 60
     248:	18 be       	out	0x38, r1	; 56
     24a:	19 be       	out	0x39, r1	; 57
     24c:	1a be       	out	0x3a, r1	; 58
     24e:	1b be       	out	0x3b, r1	; 59

00000250 <__do_copy_data>:
     250:	11 e2       	ldi	r17, 0x21	; 33
     252:	a0 e0       	ldi	r26, 0x00	; 0
     254:	b0 e2       	ldi	r27, 0x20	; 32
     256:	ec e8       	ldi	r30, 0x8C	; 140
     258:	fa e1       	ldi	r31, 0x1A	; 26
     25a:	00 e0       	ldi	r16, 0x00	; 0
     25c:	0b bf       	out	0x3b, r16	; 59
     25e:	02 c0       	rjmp	.+4      	; 0x264 <__do_copy_data+0x14>
     260:	07 90       	elpm	r0, Z+
     262:	0d 92       	st	X+, r0
     264:	a4 32       	cpi	r26, 0x24	; 36
     266:	b1 07       	cpc	r27, r17
     268:	d9 f7       	brne	.-10     	; 0x260 <__do_copy_data+0x10>
     26a:	1b be       	out	0x3b, r1	; 59

0000026c <__do_clear_bss>:
     26c:	21 e2       	ldi	r18, 0x21	; 33
     26e:	a4 e2       	ldi	r26, 0x24	; 36
     270:	b1 e2       	ldi	r27, 0x21	; 33
     272:	01 c0       	rjmp	.+2      	; 0x276 <.do_clear_bss_start>

00000274 <.do_clear_bss_loop>:
     274:	1d 92       	st	X+, r1

00000276 <.do_clear_bss_start>:
     276:	ae 3c       	cpi	r26, 0xCE	; 206
     278:	b2 07       	cpc	r27, r18
     27a:	e1 f7       	brne	.-8      	; 0x274 <.do_clear_bss_loop>
     27c:	0e 94 20 08 	call	0x1040	; 0x1040 <main>
     280:	0c 94 44 0d 	jmp	0x1a88	; 0x1a88 <_exit>

00000284 <__bad_interrupt>:
     284:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000288 <heating_oven>:
	//For both plate and dome the heater should be ON until it reaches the max temp swell point (temp_setpint + TEMP_OVERFLOW)
	//Once The max swell point is reached the heating elements should be switched OFF until the min swell point is reached (temp_setpoint - TEMP_UNDERFLOW)
	
	//------------------------Dome heater Controller----------------------------//
	//Dome heater ON State
	if(PT100_Dome < temp_dome.max_swell_point && reached_max_dome == false){
     288:	20 91 72 21 	lds	r18, 0x2172	; 0x802172 <temp_dome+0x2>
     28c:	30 91 73 21 	lds	r19, 0x2173	; 0x802173 <temp_dome+0x3>
     290:	80 91 5c 21 	lds	r24, 0x215C	; 0x80215c <PT100_Dome>
     294:	90 91 5d 21 	lds	r25, 0x215D	; 0x80215d <PT100_Dome+0x1>
     298:	82 17       	cp	r24, r18
     29a:	93 07       	cpc	r25, r19
     29c:	40 f4       	brcc	.+16     	; 0x2ae <heating_oven+0x26>
     29e:	40 91 59 21 	lds	r20, 0x2159	; 0x802159 <reached_max_dome>
     2a2:	41 11       	cpse	r20, r1
     2a4:	04 c0       	rjmp	.+8      	; 0x2ae <heating_oven+0x26>
		//Heat the dome until max temperature is reached
		DOME_HEATER_ON;
     2a6:	20 e4       	ldi	r18, 0x40	; 64
     2a8:	20 93 45 06 	sts	0x0645, r18	; 0x800645 <__TEXT_REGION_LENGTH__+0x7de645>
     2ac:	06 c0       	rjmp	.+12     	; 0x2ba <heating_oven+0x32>
	}
	else if(PT100_Dome >= temp_dome.max_swell_point)
     2ae:	82 17       	cp	r24, r18
     2b0:	93 07       	cpc	r25, r19
     2b2:	18 f0       	brcs	.+6      	; 0x2ba <heating_oven+0x32>
	{
		reached_max_dome = true;
     2b4:	21 e0       	ldi	r18, 0x01	; 1
     2b6:	20 93 59 21 	sts	0x2159, r18	; 0x802159 <reached_max_dome>
	}
	//Dome heater OFF State
	if(PT100_Dome > temp_dome.min_swell_point && reached_max_dome == true)
     2ba:	20 91 74 21 	lds	r18, 0x2174	; 0x802174 <temp_dome+0x4>
     2be:	30 91 75 21 	lds	r19, 0x2175	; 0x802175 <temp_dome+0x5>
     2c2:	28 17       	cp	r18, r24
     2c4:	39 07       	cpc	r19, r25
     2c6:	40 f4       	brcc	.+16     	; 0x2d8 <heating_oven+0x50>
     2c8:	40 91 59 21 	lds	r20, 0x2159	; 0x802159 <reached_max_dome>
     2cc:	44 23       	and	r20, r20
     2ce:	21 f0       	breq	.+8      	; 0x2d8 <heating_oven+0x50>
	{
		//Turn off Dome heater and wait until min swell point is reached
		DOME_HEATER_OFF;
     2d0:	80 e4       	ldi	r24, 0x40	; 64
     2d2:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x7de646>
     2d6:	05 c0       	rjmp	.+10     	; 0x2e2 <heating_oven+0x5a>
	}
	else if(PT100_Dome <= temp_dome.min_swell_point)
     2d8:	28 17       	cp	r18, r24
     2da:	39 07       	cpc	r19, r25
     2dc:	10 f0       	brcs	.+4      	; 0x2e2 <heating_oven+0x5a>
	{
		reached_max_dome = false;
     2de:	10 92 59 21 	sts	0x2159, r1	; 0x802159 <reached_max_dome>
	}
	
	//------------------------Plate heater Controller----------------------------//
	//Plat heater ON State
	if(PT100_Plate < temp_plate.max_swell_point && reached_max_plate == false){
     2e2:	20 91 c8 21 	lds	r18, 0x21C8	; 0x8021c8 <temp_plate+0x2>
     2e6:	30 91 c9 21 	lds	r19, 0x21C9	; 0x8021c9 <temp_plate+0x3>
     2ea:	80 91 5a 21 	lds	r24, 0x215A	; 0x80215a <PT100_Plate>
     2ee:	90 91 5b 21 	lds	r25, 0x215B	; 0x80215b <PT100_Plate+0x1>
     2f2:	82 17       	cp	r24, r18
     2f4:	93 07       	cpc	r25, r19
     2f6:	40 f4       	brcc	.+16     	; 0x308 <heating_oven+0x80>
     2f8:	40 91 58 21 	lds	r20, 0x2158	; 0x802158 <reached_max_plate>
     2fc:	41 11       	cpse	r20, r1
     2fe:	04 c0       	rjmp	.+8      	; 0x308 <heating_oven+0x80>
		//Heat the plate until max temperature is reached
		PLATE_HEATER_ON;
     300:	20 e2       	ldi	r18, 0x20	; 32
     302:	20 93 45 06 	sts	0x0645, r18	; 0x800645 <__TEXT_REGION_LENGTH__+0x7de645>
     306:	06 c0       	rjmp	.+12     	; 0x314 <heating_oven+0x8c>
	}
	else if(PT100_Plate >= temp_plate.max_swell_point)
     308:	82 17       	cp	r24, r18
     30a:	93 07       	cpc	r25, r19
     30c:	18 f0       	brcs	.+6      	; 0x314 <heating_oven+0x8c>
	{
		reached_max_plate = true;
     30e:	21 e0       	ldi	r18, 0x01	; 1
     310:	20 93 58 21 	sts	0x2158, r18	; 0x802158 <reached_max_plate>
	}
	//Plate heater OFF State
	if(PT100_Plate > temp_plate.min_swell_point && reached_max_plate == true)
     314:	20 91 ca 21 	lds	r18, 0x21CA	; 0x8021ca <temp_plate+0x4>
     318:	30 91 cb 21 	lds	r19, 0x21CB	; 0x8021cb <temp_plate+0x5>
     31c:	28 17       	cp	r18, r24
     31e:	39 07       	cpc	r19, r25
     320:	40 f4       	brcc	.+16     	; 0x332 <heating_oven+0xaa>
     322:	40 91 58 21 	lds	r20, 0x2158	; 0x802158 <reached_max_plate>
     326:	44 23       	and	r20, r20
     328:	21 f0       	breq	.+8      	; 0x332 <heating_oven+0xaa>
	{
		//Turn off Plate heater and wait until min swell point is reached
		PLATE_HEATER_OFF;
     32a:	80 e2       	ldi	r24, 0x20	; 32
     32c:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x7de646>
     330:	08 95       	ret
	}
	else if(PT100_Plate <= temp_plate.min_swell_point)
     332:	28 17       	cp	r18, r24
     334:	39 07       	cpc	r19, r25
     336:	10 f0       	brcs	.+4      	; 0x33c <heating_oven+0xb4>
	{
		reached_max_plate = false;
     338:	10 92 58 21 	sts	0x2158, r1	; 0x802158 <reached_max_plate>
     33c:	08 95       	ret

0000033e <add_int_to_str>:
	}
	
}

void add_int_to_str(int value, char *str[50])
{
     33e:	0f 93       	push	r16
     340:	1f 93       	push	r17
     342:	cf 93       	push	r28
     344:	df 93       	push	r29
     346:	cd b7       	in	r28, 0x3d	; 61
     348:	de b7       	in	r29, 0x3e	; 62
     34a:	2a 97       	sbiw	r28, 0x0a	; 10
     34c:	cd bf       	out	0x3d, r28	; 61
     34e:	de bf       	out	0x3e, r29	; 62
     350:	8b 01       	movw	r16, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     352:	4a e0       	ldi	r20, 0x0A	; 10
     354:	be 01       	movw	r22, r28
     356:	6f 5f       	subi	r22, 0xFF	; 255
     358:	7f 4f       	sbci	r23, 0xFF	; 255
     35a:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <__itoa_ncheck>
	//function used to combine an integer and a string into a string
	char temp[10];
	itoa(value,temp,10);
	strcat(*str, temp);
     35e:	be 01       	movw	r22, r28
     360:	6f 5f       	subi	r22, 0xFF	; 255
     362:	7f 4f       	sbci	r23, 0xFF	; 255
     364:	f8 01       	movw	r30, r16
     366:	80 81       	ld	r24, Z
     368:	91 81       	ldd	r25, Z+1	; 0x01
     36a:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <strcat>
}
     36e:	2a 96       	adiw	r28, 0x0a	; 10
     370:	cd bf       	out	0x3d, r28	; 61
     372:	de bf       	out	0x3e, r29	; 62
     374:	df 91       	pop	r29
     376:	cf 91       	pop	r28
     378:	1f 91       	pop	r17
     37a:	0f 91       	pop	r16
     37c:	08 95       	ret

0000037e <combine_bytes>:

uint16_t combine_bytes(uint8_t b1, uint8_t b2)
{
	//function used to concatenate two byte values and form a 16bit value
	uint16_t combined = b1 << 8 | b2;
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	98 2f       	mov	r25, r24
     382:	88 27       	eor	r24, r24
	return combined;
}
     384:	86 2b       	or	r24, r22
     386:	08 95       	ret

00000388 <preheat_finished>:
	add_int_to_str(temp, &temp_ptr);
	uart_send_bytes(temp_ptr);
}

void preheat_finished(){
	if(buzzer_on == true)
     388:	80 91 08 20 	lds	r24, 0x2008	; 0x802008 <buzzer_on>
     38c:	88 23       	and	r24, r24
     38e:	e1 f0       	breq	.+56     	; 0x3c8 <preheat_finished+0x40>
	{
		BUZZER_ON;
     390:	e0 e4       	ldi	r30, 0x40	; 64
     392:	f6 e0       	ldi	r31, 0x06	; 6
     394:	80 e8       	ldi	r24, 0x80	; 128
     396:	85 83       	std	Z+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     398:	af e4       	ldi	r26, 0x4F	; 79
     39a:	b3 ec       	ldi	r27, 0xC3	; 195
     39c:	11 97       	sbiw	r26, 0x01	; 1
     39e:	f1 f7       	brne	.-4      	; 0x39c <preheat_finished+0x14>
     3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <preheat_finished+0x1a>
     3a2:	00 00       	nop
		_delay_ms(100);
		BUZZER_OFF;
     3a4:	86 83       	std	Z+6, r24	; 0x06
     3a6:	af e4       	ldi	r26, 0x4F	; 79
     3a8:	b3 ec       	ldi	r27, 0xC3	; 195
     3aa:	11 97       	sbiw	r26, 0x01	; 1
     3ac:	f1 f7       	brne	.-4      	; 0x3aa <preheat_finished+0x22>
     3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <preheat_finished+0x28>
     3b0:	00 00       	nop
		_delay_ms(100);
		BUZZER_ON;
     3b2:	85 83       	std	Z+5, r24	; 0x05
     3b4:	bf ef       	ldi	r27, 0xFF	; 255
     3b6:	20 e7       	ldi	r18, 0x70	; 112
     3b8:	32 e0       	ldi	r19, 0x02	; 2
     3ba:	b1 50       	subi	r27, 0x01	; 1
     3bc:	20 40       	sbci	r18, 0x00	; 0
     3be:	30 40       	sbci	r19, 0x00	; 0
     3c0:	e1 f7       	brne	.-8      	; 0x3ba <preheat_finished+0x32>
     3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <preheat_finished+0x3c>
     3c4:	00 00       	nop
		_delay_ms(400);
		BUZZER_OFF;
     3c6:	86 83       	std	Z+6, r24	; 0x06
     3c8:	08 95       	ret

000003ca <baketime_finished>:
	}
}
void baketime_finished()
{
	//Buzzer chime when bake time runs out
	if(buzzer_on == true)
     3ca:	80 91 08 20 	lds	r24, 0x2008	; 0x802008 <buzzer_on>
     3ce:	88 23       	and	r24, r24
     3d0:	51 f1       	breq	.+84     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
	{
		BUZZER_ON;
     3d2:	e0 e4       	ldi	r30, 0x40	; 64
     3d4:	f6 e0       	ldi	r31, 0x06	; 6
     3d6:	80 e8       	ldi	r24, 0x80	; 128
     3d8:	85 83       	std	Z+5, r24	; 0x05
     3da:	af e4       	ldi	r26, 0x4F	; 79
     3dc:	b3 ec       	ldi	r27, 0xC3	; 195
     3de:	11 97       	sbiw	r26, 0x01	; 1
     3e0:	f1 f7       	brne	.-4      	; 0x3de <baketime_finished+0x14>
     3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <baketime_finished+0x1a>
     3e4:	00 00       	nop
		_delay_ms(100);
		BUZZER_OFF;
     3e6:	86 83       	std	Z+6, r24	; 0x06
     3e8:	af e4       	ldi	r26, 0x4F	; 79
     3ea:	b3 ec       	ldi	r27, 0xC3	; 195
     3ec:	11 97       	sbiw	r26, 0x01	; 1
     3ee:	f1 f7       	brne	.-4      	; 0x3ec <baketime_finished+0x22>
     3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <baketime_finished+0x28>
     3f2:	00 00       	nop
		_delay_ms(100);
		BUZZER_ON;
     3f4:	85 83       	std	Z+5, r24	; 0x05
     3f6:	af e4       	ldi	r26, 0x4F	; 79
     3f8:	b3 ec       	ldi	r27, 0xC3	; 195
     3fa:	11 97       	sbiw	r26, 0x01	; 1
     3fc:	f1 f7       	brne	.-4      	; 0x3fa <baketime_finished+0x30>
     3fe:	00 c0       	rjmp	.+0      	; 0x400 <__LOCK_REGION_LENGTH__>
     400:	00 00       	nop
		_delay_ms(100);
		BUZZER_OFF;
     402:	86 83       	std	Z+6, r24	; 0x06
     404:	af e4       	ldi	r26, 0x4F	; 79
     406:	b3 ec       	ldi	r27, 0xC3	; 195
     408:	11 97       	sbiw	r26, 0x01	; 1
     40a:	f1 f7       	brne	.-4      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     40c:	00 c0       	rjmp	.+0      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     40e:	00 00       	nop
		_delay_ms(100);
		BUZZER_ON;
     410:	85 83       	std	Z+5, r24	; 0x05
     412:	bf ef       	ldi	r27, 0xFF	; 255
     414:	20 e7       	ldi	r18, 0x70	; 112
     416:	32 e0       	ldi	r19, 0x02	; 2
     418:	b1 50       	subi	r27, 0x01	; 1
     41a:	20 40       	sbci	r18, 0x00	; 0
     41c:	30 40       	sbci	r19, 0x00	; 0
     41e:	e1 f7       	brne	.-8      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     420:	00 c0       	rjmp	.+0      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     422:	00 00       	nop
		_delay_ms(400);
		BUZZER_OFF;
     424:	86 83       	std	Z+6, r24	; 0x06
     426:	08 95       	ret

00000428 <run_fan>:
}

void run_fan()
{
	//the fan runs all the time except when the oven is stopped
	if(fan_on==true){
     428:	80 91 34 21 	lds	r24, 0x2134	; 0x802134 <fan_on>
     42c:	88 23       	and	r24, r24
     42e:	21 f0       	breq	.+8      	; 0x438 <run_fan+0x10>
		FAN_RUN_ON;
     430:	82 e0       	ldi	r24, 0x02	; 2
     432:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7de605>
     436:	08 95       	ret
			//FAN_START_OFF;
		//}
	}
	else{
		//switch the fan off when the door is opened or stop is pressed
		FAN_RUN_OFF;
     438:	82 e0       	ldi	r24, 0x02	; 2
     43a:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7de606>
     43e:	08 95       	ret

00000440 <set_temp_swellpoints>:

void set_temp_swellpoints(char temp){
	//this function is used to set the upper and lower bounds of the temperature
	//NOTE: The parameter char temp is used to destinguish between plate (p) and dome (d)
	
	if(temp == 'p'){
     440:	80 37       	cpi	r24, 0x70	; 112
     442:	51 f4       	brne	.+20     	; 0x458 <set_temp_swellpoints+0x18>
		temp_plate.max_swell_point = temp_plate.setpoint + TEMP_OVERFLOW_PLATE;
     444:	e6 ec       	ldi	r30, 0xC6	; 198
     446:	f1 e2       	ldi	r31, 0x21	; 33
     448:	80 81       	ld	r24, Z
     44a:	91 81       	ldd	r25, Z+1	; 0x01
     44c:	82 83       	std	Z+2, r24	; 0x02
     44e:	93 83       	std	Z+3, r25	; 0x03
		temp_plate.min_swell_point = temp_plate.setpoint - TEMP_UNDERFLOW_PLATE;
     450:	03 97       	sbiw	r24, 0x03	; 3
     452:	84 83       	std	Z+4, r24	; 0x04
     454:	95 83       	std	Z+5, r25	; 0x05
     456:	08 95       	ret
	}
	else if(temp == 'd'){
     458:	84 36       	cpi	r24, 0x64	; 100
     45a:	49 f4       	brne	.+18     	; 0x46e <set_temp_swellpoints+0x2e>
		temp_dome.max_swell_point = temp_dome.setpoint + TEMP_OVERFLOW_DOME;
     45c:	e0 e7       	ldi	r30, 0x70	; 112
     45e:	f1 e2       	ldi	r31, 0x21	; 33
     460:	80 81       	ld	r24, Z
     462:	91 81       	ldd	r25, Z+1	; 0x01
     464:	82 83       	std	Z+2, r24	; 0x02
     466:	93 83       	std	Z+3, r25	; 0x03
		temp_dome.min_swell_point = temp_dome.setpoint - TEMP_UNDERFLOW_DOME;
     468:	05 97       	sbiw	r24, 0x05	; 5
     46a:	84 83       	std	Z+4, r24	; 0x04
     46c:	95 83       	std	Z+5, r25	; 0x05
     46e:	08 95       	ret

00000470 <remainder_test>:
}

bool remainder_test(uint16_t value, uint8_t divider ){
	//This function calculates whether there is a remainder between the value and the divider
	//if there is it returns true, otherwise it will return false
	if(value % divider != 0){
     470:	70 e0       	ldi	r23, 0x00	; 0
     472:	0e 94 af 0c 	call	0x195e	; 0x195e <__udivmodhi4>
     476:	89 2b       	or	r24, r25
     478:	11 f0       	breq	.+4      	; 0x47e <remainder_test+0xe>
		return true;
     47a:	81 e0       	ldi	r24, 0x01	; 1
     47c:	08 95       	ret
	}else
	{
		return false;
     47e:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     480:	08 95       	ret

00000482 <within_limits_test>:

bool within_limits_test(uint16_t value, uint16_t lower_bound, uint16_t upper_bound){
	//This function tests whether the value is within the boundaries of the upper and lower bound
	//If so, then it returns true otherwise the function returns false
	if(value >= lower_bound && value <= upper_bound){
     482:	86 17       	cp	r24, r22
     484:	97 07       	cpc	r25, r23
     486:	28 f0       	brcs	.+10     	; 0x492 <within_limits_test+0x10>
     488:	48 17       	cp	r20, r24
     48a:	59 07       	cpc	r21, r25
     48c:	20 f4       	brcc	.+8      	; 0x496 <within_limits_test+0x14>
		return true;
	}
	else
	{
		return false;
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	08 95       	ret
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	08 95       	ret

bool within_limits_test(uint16_t value, uint16_t lower_bound, uint16_t upper_bound){
	//This function tests whether the value is within the boundaries of the upper and lower bound
	//If so, then it returns true otherwise the function returns false
	if(value >= lower_bound && value <= upper_bound){
		return true;
     496:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return false;
	}
}
     498:	08 95       	ret

0000049a <init_ADC>:

//-------------------------------ADC Functions--------------------------------------//
void init_ADC()
{
	//Setup ADCA Channel0 for PA4
	ADCA.CH0.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc; // Single ended input on channel 0
     49a:	e0 e0       	ldi	r30, 0x00	; 0
     49c:	f2 e0       	ldi	r31, 0x02	; 2
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	80 a3       	std	Z+32, r24	; 0x20
	ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN4_gc; //Input Pin4 on channel 0
     4a2:	90 e2       	ldi	r25, 0x20	; 32
     4a4:	91 a3       	std	Z+33, r25	; 0x21
	//Setup ADCA Channel1 for PA5
	ADCA.CH1.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc; // Single ended input on channel 1
     4a6:	80 a7       	std	Z+40, r24	; 0x28
	ADCA.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc; //Input Pin5 on channel 1
     4a8:	88 e2       	ldi	r24, 0x28	; 40
     4aa:	81 a7       	std	Z+41, r24	; 0x29
	//Configure ADCA Registers
	ADCA.CTRLB = ADC_FREERUN_bm; // Enable free run mode
     4ac:	88 e0       	ldi	r24, 0x08	; 8
     4ae:	81 83       	std	Z+1, r24	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INT1V_gc; // Internal reference voltage of 1V
     4b0:	12 82       	std	Z+2, r1	; 0x02
	ADCA.PRESCALER = ADC_PRESCALER_DIV256_gc; //Set Prescaler value 256
     4b2:	86 e0       	ldi	r24, 0x06	; 6
     4b4:	84 83       	std	Z+4, r24	; 0x04
     4b6:	08 95       	ret

000004b8 <start_ADC>:
}

void start_ADC()
{
	//Set free-running conversion  on channel0 - Pin4
	ADCA.EVCTRL = ADC_SWEEP0_bm;
     4b8:	e0 e0       	ldi	r30, 0x00	; 0
     4ba:	f2 e0       	ldi	r31, 0x02	; 2
     4bc:	80 e4       	ldi	r24, 0x40	; 64
     4be:	83 83       	std	Z+3, r24	; 0x03
	//Set free-running conversion  on channel1 - Pin5
	ADCA.EVCTRL = ADC_SWEEP1_bm;
     4c0:	80 e8       	ldi	r24, 0x80	; 128
     4c2:	83 83       	std	Z+3, r24	; 0x03
	//Enable ADC
	ADCA.CTRLA = ADC_ENABLE_bm;
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	80 83       	st	Z, r24
     4c8:	08 95       	ret

000004ca <adc_get_mean>:
	
}

uint16_t* adc_get_mean(uint8_t counter)
{
     4ca:	cf 93       	push	r28
     4cc:	df 93       	push	r29
     4ce:	00 d0       	rcall	.+0      	; 0x4d0 <adc_get_mean+0x6>
     4d0:	00 d0       	rcall	.+0      	; 0x4d2 <adc_get_mean+0x8>
     4d2:	cd b7       	in	r28, 0x3d	; 61
     4d4:	de b7       	in	r29, 0x3e	; 62
	//Fetch adc conversion and place into buffer
	//uint32_t adc_100 = 0;
	uint8_t x;
	uint8_t chan;
	uint16_t adc_final[CHAN_NUM] = {0,0};
     4d6:	19 82       	std	Y+1, r1	; 0x01
     4d8:	1a 82       	std	Y+2, r1	; 0x02
     4da:	1b 82       	std	Y+3, r1	; 0x03
     4dc:	1c 82       	std	Y+4, r1	; 0x04
	static uint16_t adc_return[CHAN_NUM] = {0,0};
	uint8_t none_zero_cnt[CHAN_NUM] = {0,0};
     4de:	1d 82       	std	Y+5, r1	; 0x05
     4e0:	1e 82       	std	Y+6, r1	; 0x06
	adc_buffer[0][counter] = ADCA_CH0RES;
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <__TEXT_REGION_LENGTH__+0x7de210>
     4e8:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <__TEXT_REGION_LENGTH__+0x7de211>
     4ec:	fc 01       	movw	r30, r24
     4ee:	ee 0f       	add	r30, r30
     4f0:	ff 1f       	adc	r31, r31
     4f2:	ea 58       	subi	r30, 0x8A	; 138
     4f4:	fe 4d       	sbci	r31, 0xDE	; 222
     4f6:	20 83       	st	Z, r18
     4f8:	31 83       	std	Z+1, r19	; 0x01
	adc_buffer[1][counter] = ADCA_CH1RES;
     4fa:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <__TEXT_REGION_LENGTH__+0x7de212>
     4fe:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <__TEXT_REGION_LENGTH__+0x7de213>
     502:	fc 01       	movw	r30, r24
     504:	74 96       	adiw	r30, 0x14	; 20
     506:	ee 0f       	add	r30, r30
     508:	ff 1f       	adc	r31, r31
     50a:	ea 58       	subi	r30, 0x8A	; 138
     50c:	fe 4d       	sbci	r31, 0xDE	; 222
     50e:	20 83       	st	Z, r18
     510:	31 83       	std	Z+1, r19	; 0x01
	
	//Get Final adc Mean value form the ADC MEAN buffer
	for(chan = 0; chan < CHAN_NUM ; chan++)
     512:	30 e0       	ldi	r19, 0x00	; 0
     514:	33 c0       	rjmp	.+102    	; 0x57c <adc_get_mean+0xb2>
	{
		for(x = 0; x < BUFFER_SIZE; x++)
		{
			//Filter out zero values for the buffer
			if(adc_buffer[chan][x] != 0){
     516:	83 2f       	mov	r24, r19
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	44 e1       	ldi	r20, 0x14	; 20
     51c:	48 9f       	mul	r20, r24
     51e:	f0 01       	movw	r30, r0
     520:	49 9f       	mul	r20, r25
     522:	f0 0d       	add	r31, r0
     524:	11 24       	eor	r1, r1
     526:	e2 0f       	add	r30, r18
     528:	f1 1d       	adc	r31, r1
     52a:	ee 0f       	add	r30, r30
     52c:	ff 1f       	adc	r31, r31
     52e:	ea 58       	subi	r30, 0x8A	; 138
     530:	fe 4d       	sbci	r31, 0xDE	; 222
     532:	60 81       	ld	r22, Z
     534:	71 81       	ldd	r23, Z+1	; 0x01
     536:	61 15       	cp	r22, r1
     538:	71 05       	cpc	r23, r1
     53a:	d1 f0       	breq	.+52     	; 0x570 <adc_get_mean+0xa6>
				adc_final[chan] += adc_buffer[chan][x] - ADC_OFFSET;
     53c:	fc 01       	movw	r30, r24
     53e:	ee 0f       	add	r30, r30
     540:	ff 1f       	adc	r31, r31
     542:	41 e0       	ldi	r20, 0x01	; 1
     544:	50 e0       	ldi	r21, 0x00	; 0
     546:	4c 0f       	add	r20, r28
     548:	5d 1f       	adc	r21, r29
     54a:	e4 0f       	add	r30, r20
     54c:	f5 1f       	adc	r31, r21
     54e:	40 81       	ld	r20, Z
     550:	51 81       	ldd	r21, Z+1	; 0x01
     552:	46 0f       	add	r20, r22
     554:	57 1f       	adc	r21, r23
     556:	4e 5b       	subi	r20, 0xBE	; 190
     558:	51 09       	sbc	r21, r1
     55a:	40 83       	st	Z, r20
     55c:	51 83       	std	Z+1, r21	; 0x01
				none_zero_cnt[chan] += 1;
     55e:	e5 e0       	ldi	r30, 0x05	; 5
     560:	f0 e0       	ldi	r31, 0x00	; 0
     562:	ec 0f       	add	r30, r28
     564:	fd 1f       	adc	r31, r29
     566:	e8 0f       	add	r30, r24
     568:	f9 1f       	adc	r31, r25
     56a:	80 81       	ld	r24, Z
     56c:	8f 5f       	subi	r24, 0xFF	; 255
     56e:	80 83       	st	Z, r24
	adc_buffer[1][counter] = ADCA_CH1RES;
	
	//Get Final adc Mean value form the ADC MEAN buffer
	for(chan = 0; chan < CHAN_NUM ; chan++)
	{
		for(x = 0; x < BUFFER_SIZE; x++)
     570:	2f 5f       	subi	r18, 0xFF	; 255
     572:	01 c0       	rjmp	.+2      	; 0x576 <adc_get_mean+0xac>
     574:	20 e0       	ldi	r18, 0x00	; 0
     576:	24 31       	cpi	r18, 0x14	; 20
     578:	70 f2       	brcs	.-100    	; 0x516 <adc_get_mean+0x4c>
	uint8_t none_zero_cnt[CHAN_NUM] = {0,0};
	adc_buffer[0][counter] = ADCA_CH0RES;
	adc_buffer[1][counter] = ADCA_CH1RES;
	
	//Get Final adc Mean value form the ADC MEAN buffer
	for(chan = 0; chan < CHAN_NUM ; chan++)
     57a:	3f 5f       	subi	r19, 0xFF	; 255
     57c:	32 30       	cpi	r19, 0x02	; 2
     57e:	d0 f3       	brcs	.-12     	; 0x574 <adc_get_mean+0xaa>
				none_zero_cnt[chan] += 1;
			}
		}
	}
	
	adc_return[0] = adc_final[0] / none_zero_cnt[0];
     580:	89 81       	ldd	r24, Y+1	; 0x01
     582:	9a 81       	ldd	r25, Y+2	; 0x02
     584:	6d 81       	ldd	r22, Y+5	; 0x05
     586:	70 e0       	ldi	r23, 0x00	; 0
     588:	0e 94 af 0c 	call	0x195e	; 0x195e <__udivmodhi4>
     58c:	e8 e2       	ldi	r30, 0x28	; 40
     58e:	f1 e2       	ldi	r31, 0x21	; 33
     590:	60 83       	st	Z, r22
     592:	71 83       	std	Z+1, r23	; 0x01
	adc_return[1] = adc_final[1] / none_zero_cnt[1];
     594:	8b 81       	ldd	r24, Y+3	; 0x03
     596:	9c 81       	ldd	r25, Y+4	; 0x04
     598:	6e 81       	ldd	r22, Y+6	; 0x06
     59a:	70 e0       	ldi	r23, 0x00	; 0
     59c:	0e 94 af 0c 	call	0x195e	; 0x195e <__udivmodhi4>
     5a0:	62 83       	std	Z+2, r22	; 0x02
     5a2:	73 83       	std	Z+3, r23	; 0x03
	
	//Return the final value
	return adc_return;
}
     5a4:	cf 01       	movw	r24, r30
     5a6:	26 96       	adiw	r28, 0x06	; 6
     5a8:	cd bf       	out	0x3d, r28	; 61
     5aa:	de bf       	out	0x3e, r29	; 62
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	08 95       	ret

000005b2 <init_DAC>:

//-------------------------------DAC Functions--------------------------------------//
void init_DAC()
{
	DACB.CTRLB = DAC_CHSEL_SINGLE_gc; //select single channel operation on channel 1.
     5b2:	e0 e2       	ldi	r30, 0x20	; 32
     5b4:	f3 e0       	ldi	r31, 0x03	; 3
     5b6:	11 82       	std	Z+1, r1	; 0x01
	DACB.CTRLC = DAC_REFSEL_INT1V_gc; //1V as conversion reference
     5b8:	12 82       	std	Z+2, r1	; 0x02
	//DACB.CH0GAINCAL = 0x8D;
	//DACB.CH0OFFSETCAL = 0x24;
	DACB.CTRLA = DAC_CH0EN_bm; //enable DAC output 1
     5ba:	84 e0       	ldi	r24, 0x04	; 4
     5bc:	80 83       	st	Z, r24
	DACB.CTRLA |= DAC_ENABLE_bm; // enable the DAC module itself.
     5be:	80 81       	ld	r24, Z
     5c0:	81 60       	ori	r24, 0x01	; 1
     5c2:	80 83       	st	Z, r24
     5c4:	08 95       	ret

000005c6 <init_timer0>:

//-------------------------------Timer Functions--------------------------------------//

void init_timer0()
{
	TCC0.PER = 0x004E;  //Set Timer overflow value (0x004E -> 10 msec with a 256 Prescaler)
     5c6:	e0 e0       	ldi	r30, 0x00	; 0
     5c8:	f8 e0       	ldi	r31, 0x08	; 8
     5ca:	8e e4       	ldi	r24, 0x4E	; 78
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	86 a3       	std	Z+38, r24	; 0x26
     5d0:	97 a3       	std	Z+39, r25	; 0x27
	TCC0.INTCTRLA = TC_OVFINTLVL_LO_gc; //Set timer Overflow interrupt 
     5d2:	81 e0       	ldi	r24, 0x01	; 1
     5d4:	86 83       	std	Z+6, r24	; 0x06
	
	TCC0.CTRLA = TC_CLKSEL_DIV256_gc; // Set timer Prescaler 256
     5d6:	86 e0       	ldi	r24, 0x06	; 6
     5d8:	80 83       	st	Z, r24
     5da:	08 95       	ret

000005dc <init_timer1>:
	
}

void init_timer1()
{
	TCC1.PER = 0x0186;  //Set Timer overflow value (0x004E -> 200 msec with a 1024 Prescaler)
     5dc:	e0 e4       	ldi	r30, 0x40	; 64
     5de:	f8 e0       	ldi	r31, 0x08	; 8
     5e0:	86 e8       	ldi	r24, 0x86	; 134
     5e2:	91 e0       	ldi	r25, 0x01	; 1
     5e4:	86 a3       	std	Z+38, r24	; 0x26
     5e6:	97 a3       	std	Z+39, r25	; 0x27
	TCC1.INTCTRLA = TC_OVFINTLVL_LO_gc; //Set timer Overflow interrupt
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	86 83       	std	Z+6, r24	; 0x06
	
	TCC1.CTRLA = TC_CLKSEL_DIV1024_gc; // Set timer Prescaler 1024
     5ec:	87 e0       	ldi	r24, 0x07	; 7
     5ee:	80 83       	st	Z, r24
     5f0:	08 95       	ret

000005f2 <init_uart>:
}

//------------------------------- UART Functions--------------------------------------//

void init_uart(uint32_t baudrate)
{
     5f2:	cf 92       	push	r12
     5f4:	df 92       	push	r13
     5f6:	ef 92       	push	r14
     5f8:	ff 92       	push	r15
     5fa:	cf 93       	push	r28
     5fc:	df 93       	push	r29
     5fe:	6b 01       	movw	r12, r22
     600:	7c 01       	movw	r14, r24
	// Variable to control the baud rate clock generator
	double BSEL = 0;
	
	// Port Setup for UARTD0 - Pins PD2(Rx) and PD3(Tx)
  	// PC3 (TXD0) as output
	PORTD.DIRSET   = PIN3_bm;
     602:	e0 e6       	ldi	r30, 0x60	; 96
     604:	f6 e0       	ldi	r31, 0x06	; 6
     606:	88 e0       	ldi	r24, 0x08	; 8
     608:	81 83       	std	Z+1, r24	; 0x01
	// PC2 (RXD0) as input
	PORTD.DIRCLR   = PIN2_bm;
     60a:	84 e0       	ldi	r24, 0x04	; 4
     60c:	82 83       	std	Z+2, r24	; 0x02
	
	// Use USARTD0 and initialize buffers
	USART_InterruptDriver_Initialize(&USART_data, &USART, USART_DREINTLVL_LO_gc);
     60e:	41 e0       	ldi	r20, 0x01	; 1
     610:	60 ea       	ldi	r22, 0xA0	; 160
     612:	79 e0       	ldi	r23, 0x09	; 9
     614:	81 e6       	ldi	r24, 0x61	; 97
     616:	91 e2       	ldi	r25, 0x21	; 33
     618:	0e 94 a1 0a 	call	0x1542	; 0x1542 <USART_InterruptDriver_Initialize>
	
	// USARTD0, 8 Data bits, No Parity, 1 Stop bit
	USART_Format_Set(USART_data.usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
     61c:	c0 91 61 21 	lds	r28, 0x2161	; 0x802161 <USART_data>
     620:	d0 91 62 21 	lds	r29, 0x2162	; 0x802162 <USART_data+0x1>
     624:	83 e0       	ldi	r24, 0x03	; 3
     626:	8d 83       	std	Y+5, r24	; 0x05
	
	// Enable RXC interrupt
	USART_RxdInterruptLevel_Set(USART_data.usart, USART_RXCINTLVL_LO_gc);
     628:	8b 81       	ldd	r24, Y+3	; 0x03
     62a:	8f 7c       	andi	r24, 0xCF	; 207
     62c:	80 61       	ori	r24, 0x10	; 16
     62e:	8b 83       	std	Y+3, r24	; 0x03

	// Set Baud rate using default I/O clock frequency (2MHz)
	BSEL = (F_CPU / (16 * baudrate)) - 1;
     630:	d7 01       	movw	r26, r14
     632:	c6 01       	movw	r24, r12
     634:	88 0f       	add	r24, r24
     636:	99 1f       	adc	r25, r25
     638:	aa 1f       	adc	r26, r26
     63a:	bb 1f       	adc	r27, r27
     63c:	88 0f       	add	r24, r24
     63e:	99 1f       	adc	r25, r25
     640:	aa 1f       	adc	r26, r26
     642:	bb 1f       	adc	r27, r27
     644:	9c 01       	movw	r18, r24
     646:	ad 01       	movw	r20, r26
     648:	22 0f       	add	r18, r18
     64a:	33 1f       	adc	r19, r19
     64c:	44 1f       	adc	r20, r20
     64e:	55 1f       	adc	r21, r21
     650:	22 0f       	add	r18, r18
     652:	33 1f       	adc	r19, r19
     654:	44 1f       	adc	r20, r20
     656:	55 1f       	adc	r21, r21
     658:	60 e8       	ldi	r22, 0x80	; 128
     65a:	74 e8       	ldi	r23, 0x84	; 132
     65c:	8e e1       	ldi	r24, 0x1E	; 30
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	0e 94 c3 0c 	call	0x1986	; 0x1986 <__udivmodsi4>
     664:	ca 01       	movw	r24, r20
     666:	b9 01       	movw	r22, r18
     668:	61 50       	subi	r22, 0x01	; 1
     66a:	71 09       	sbc	r23, r1
     66c:	81 09       	sbc	r24, r1
     66e:	91 09       	sbc	r25, r1
     670:	0e 94 b4 0b 	call	0x1768	; 0x1768 <__floatunsisf>
	USART_Baudrate_Set(&USART, (uint8_t)BSEL , 0);
     674:	0e 94 85 0b 	call	0x170a	; 0x170a <__fixunssfsi>
     678:	e0 ea       	ldi	r30, 0xA0	; 160
     67a:	f9 e0       	ldi	r31, 0x09	; 9
     67c:	66 83       	std	Z+6, r22	; 0x06
     67e:	17 82       	std	Z+7, r1	; 0x07
	
	// Enable both RX and TX
	USART_Rx_Enable(USART_data.usart);
     680:	8c 81       	ldd	r24, Y+4	; 0x04
     682:	80 61       	ori	r24, 0x10	; 16
     684:	8c 83       	std	Y+4, r24	; 0x04
	USART_Tx_Enable(USART_data.usart);
     686:	8c 81       	ldd	r24, Y+4	; 0x04
     688:	88 60       	ori	r24, 0x08	; 8
     68a:	8c 83       	std	Y+4, r24	; 0x04

}
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	ff 90       	pop	r15
     692:	ef 90       	pop	r14
     694:	df 90       	pop	r13
     696:	cf 90       	pop	r12
     698:	08 95       	ret

0000069a <uart_receive_bytes>:

uint8_t * uart_receive_bytes()
{
     69a:	cf 92       	push	r12
     69c:	df 92       	push	r13
     69e:	ef 92       	push	r14
     6a0:	ff 92       	push	r15
     6a2:	0f 93       	push	r16
     6a4:	1f 93       	push	r17
     6a6:	cf 93       	push	r28
     6a8:	df 93       	push	r29
	// counter variable
	uint8_t i = 0;
	// Array variable to store received data in
	static uint8_t data_received[NUM_BYTES];
	//tick timer used to time data receive loop
	uint32_t tick_previous = tick_current;
     6aa:	c0 90 43 21 	lds	r12, 0x2143	; 0x802143 <tick_current>
     6ae:	d0 90 44 21 	lds	r13, 0x2144	; 0x802144 <tick_current+0x1>
     6b2:	e0 90 45 21 	lds	r14, 0x2145	; 0x802145 <tick_current+0x2>
     6b6:	f0 90 46 21 	lds	r15, 0x2146	; 0x802146 <tick_current+0x3>
	bool timeout = false;
     6ba:	d0 e0       	ldi	r29, 0x00	; 0
}

uint8_t * uart_receive_bytes()
{
	// counter variable
	uint8_t i = 0;
     6bc:	c0 e0       	ldi	r28, 0x00	; 0
	static uint8_t data_received[NUM_BYTES];
	//tick timer used to time data receive loop
	uint32_t tick_previous = tick_current;
	bool timeout = false;
	//receiver loop
	while (i < NUM_BYTES && timeout == false ) {
     6be:	2a c0       	rjmp	.+84     	; 0x714 <uart_receive_bytes+0x7a>
		if (USART_RXBufferData_Available(&USART_data)) {
     6c0:	81 e6       	ldi	r24, 0x61	; 97
     6c2:	91 e2       	ldi	r25, 0x21	; 33
     6c4:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <USART_RXBufferData_Available>
     6c8:	88 23       	and	r24, r24
     6ca:	59 f0       	breq	.+22     	; 0x6e2 <uart_receive_bytes+0x48>
			data_received[i] = USART_RXBuffer_GetByte(&USART_data);
     6cc:	0c 2f       	mov	r16, r28
     6ce:	10 e0       	ldi	r17, 0x00	; 0
     6d0:	81 e6       	ldi	r24, 0x61	; 97
     6d2:	91 e2       	ldi	r25, 0x21	; 33
     6d4:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <USART_RXBuffer_GetByte>
     6d8:	f8 01       	movw	r30, r16
     6da:	ec 5d       	subi	r30, 0xDC	; 220
     6dc:	fe 4d       	sbci	r31, 0xDE	; 222
     6de:	80 83       	st	Z, r24
			i++;
     6e0:	cf 5f       	subi	r28, 0xFF	; 255
		}
		//after 30ms timeout
		if(tick_current >= tick_previous + 3)
     6e2:	40 91 43 21 	lds	r20, 0x2143	; 0x802143 <tick_current>
     6e6:	50 91 44 21 	lds	r21, 0x2144	; 0x802144 <tick_current+0x1>
     6ea:	60 91 45 21 	lds	r22, 0x2145	; 0x802145 <tick_current+0x2>
     6ee:	70 91 46 21 	lds	r23, 0x2146	; 0x802146 <tick_current+0x3>
     6f2:	d7 01       	movw	r26, r14
     6f4:	c6 01       	movw	r24, r12
     6f6:	03 96       	adiw	r24, 0x03	; 3
     6f8:	a1 1d       	adc	r26, r1
     6fa:	b1 1d       	adc	r27, r1
     6fc:	48 17       	cp	r20, r24
     6fe:	59 07       	cpc	r21, r25
     700:	6a 07       	cpc	r22, r26
     702:	7b 07       	cpc	r23, r27
     704:	38 f0       	brcs	.+14     	; 0x714 <uart_receive_bytes+0x7a>
		{
			timeout = true;
			//fill remaining bytes with zeros
			i++;
     706:	cf 5f       	subi	r28, 0xFF	; 255
			data_received[i] = 0;
     708:	ec 2f       	mov	r30, r28
     70a:	f0 e0       	ldi	r31, 0x00	; 0
     70c:	ec 5d       	subi	r30, 0xDC	; 220
     70e:	fe 4d       	sbci	r31, 0xDE	; 222
     710:	10 82       	st	Z, r1
			i++;
		}
		//after 30ms timeout
		if(tick_current >= tick_previous + 3)
		{
			timeout = true;
     712:	d1 e0       	ldi	r29, 0x01	; 1
	static uint8_t data_received[NUM_BYTES];
	//tick timer used to time data receive loop
	uint32_t tick_previous = tick_current;
	bool timeout = false;
	//receiver loop
	while (i < NUM_BYTES && timeout == false ) {
     714:	c4 30       	cpi	r28, 0x04	; 4
     716:	10 f4       	brcc	.+4      	; 0x71c <uart_receive_bytes+0x82>
     718:	dd 23       	and	r29, r29
     71a:	91 f2       	breq	.-92     	; 0x6c0 <uart_receive_bytes+0x26>
				//data_received[cnt] = 0;
			//}
		}
	}
	return data_received;
}
     71c:	84 e2       	ldi	r24, 0x24	; 36
     71e:	91 e2       	ldi	r25, 0x21	; 33
     720:	df 91       	pop	r29
     722:	cf 91       	pop	r28
     724:	1f 91       	pop	r17
     726:	0f 91       	pop	r16
     728:	ff 90       	pop	r15
     72a:	ef 90       	pop	r14
     72c:	df 90       	pop	r13
     72e:	cf 90       	pop	r12
     730:	08 95       	ret

00000732 <uart_send_bytes>:


void  uart_send_bytes(char data[30]){
     732:	ef 92       	push	r14
     734:	ff 92       	push	r15
     736:	0f 93       	push	r16
     738:	1f 93       	push	r17
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	7c 01       	movw	r14, r24
	uint8_t length = strlen(data);
     740:	fc 01       	movw	r30, r24
     742:	01 90       	ld	r0, Z+
     744:	00 20       	and	r0, r0
     746:	e9 f7       	brne	.-6      	; 0x742 <uart_send_bytes+0x10>
     748:	31 97       	sbiw	r30, 0x01	; 1
     74a:	8f 01       	movw	r16, r30
     74c:	08 1b       	sub	r16, r24
     74e:	19 0b       	sbc	r17, r25
	int i;
	
	//Wait for data register to be empty to put new data
	do{
		
	}while(!USART_IsTXDataRegisterEmpty(&USART));
     750:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7de9a1>
     754:	85 ff       	sbrs	r24, 5
     756:	fc cf       	rjmp	.-8      	; 0x750 <uart_send_bytes+0x1e>
     758:	c0 e0       	ldi	r28, 0x00	; 0
     75a:	d0 e0       	ldi	r29, 0x00	; 0
     75c:	08 c0       	rjmp	.+16     	; 0x76e <uart_send_bytes+0x3c>
	
	for(i=0;i<3;i++)
	{
		//Sending 3 clear signals (0xff) to the Nextion before transmitting instructions
		while(USART_TXBuffer_PutByte(&USART_data, 0xff)==false)
     75e:	6f ef       	ldi	r22, 0xFF	; 255
     760:	81 e6       	ldi	r24, 0x61	; 97
     762:	91 e2       	ldi	r25, 0x21	; 33
     764:	0e 94 b4 0a 	call	0x1568	; 0x1568 <USART_TXBuffer_PutByte>
     768:	88 23       	and	r24, r24
     76a:	c9 f3       	breq	.-14     	; 0x75e <uart_send_bytes+0x2c>
	//Wait for data register to be empty to put new data
	do{
		
	}while(!USART_IsTXDataRegisterEmpty(&USART));
	
	for(i=0;i<3;i++)
     76c:	21 96       	adiw	r28, 0x01	; 1
     76e:	c3 30       	cpi	r28, 0x03	; 3
     770:	d1 05       	cpc	r29, r1
     772:	ac f3       	brlt	.-22     	; 0x75e <uart_send_bytes+0x2c>
     774:	c0 e0       	ldi	r28, 0x00	; 0
     776:	d0 e0       	ldi	r29, 0x00	; 0
     778:	0a c0       	rjmp	.+20     	; 0x78e <uart_send_bytes+0x5c>
	}
	
	//Sending data instructions to the Nextion
	int cnt = 0;
	while (cnt < length) {
		byteToBuffer = USART_TXBuffer_PutByte(&USART_data, data[cnt]);
     77a:	f7 01       	movw	r30, r14
     77c:	ec 0f       	add	r30, r28
     77e:	fd 1f       	adc	r31, r29
     780:	60 81       	ld	r22, Z
     782:	81 e6       	ldi	r24, 0x61	; 97
     784:	91 e2       	ldi	r25, 0x21	; 33
     786:	0e 94 b4 0a 	call	0x1568	; 0x1568 <USART_TXBuffer_PutByte>
		if(byteToBuffer){
     78a:	81 11       	cpse	r24, r1
			cnt++;
     78c:	21 96       	adiw	r28, 0x01	; 1
		}
	}
	
	//Sending data instructions to the Nextion
	int cnt = 0;
	while (cnt < length) {
     78e:	c8 01       	movw	r24, r16
     790:	99 27       	eor	r25, r25
     792:	c8 17       	cp	r28, r24
     794:	d9 07       	cpc	r29, r25
     796:	8c f3       	brlt	.-30     	; 0x77a <uart_send_bytes+0x48>
     798:	c0 e0       	ldi	r28, 0x00	; 0
     79a:	d0 e0       	ldi	r29, 0x00	; 0
     79c:	08 c0       	rjmp	.+16     	; 0x7ae <uart_send_bytes+0x7c>
	}
	
	for(i=0;i<3;i++)
	{
		//Sending 3 clear signals (0xff) to the Nextion after transmitting instructions
		while(USART_TXBuffer_PutByte(&USART_data, 0xff)==false)
     79e:	6f ef       	ldi	r22, 0xFF	; 255
     7a0:	81 e6       	ldi	r24, 0x61	; 97
     7a2:	91 e2       	ldi	r25, 0x21	; 33
     7a4:	0e 94 b4 0a 	call	0x1568	; 0x1568 <USART_TXBuffer_PutByte>
     7a8:	88 23       	and	r24, r24
     7aa:	c9 f3       	breq	.-14     	; 0x79e <uart_send_bytes+0x6c>
		if(byteToBuffer){
			cnt++;
		}
	}
	
	for(i=0;i<3;i++)
     7ac:	21 96       	adiw	r28, 0x01	; 1
     7ae:	c3 30       	cpi	r28, 0x03	; 3
     7b0:	d1 05       	cpc	r29, r1
     7b2:	ac f3       	brlt	.-22     	; 0x79e <uart_send_bytes+0x6c>
		while(USART_TXBuffer_PutByte(&USART_data, 0xff)==false)
		{
			
		}
	}
}
     7b4:	df 91       	pop	r29
     7b6:	cf 91       	pop	r28
     7b8:	1f 91       	pop	r17
     7ba:	0f 91       	pop	r16
     7bc:	ff 90       	pop	r15
     7be:	ef 90       	pop	r14
     7c0:	08 95       	ret

000007c2 <send_temp>:
	uint16_t combined = b1 << 8 | b2;
	return combined;
}

void send_temp(uint16_t temp, char command[30])
{
     7c2:	0f 93       	push	r16
     7c4:	1f 93       	push	r17
     7c6:	cf 93       	push	r28
     7c8:	df 93       	push	r29
     7ca:	cd b7       	in	r28, 0x3d	; 61
     7cc:	de b7       	in	r29, 0x3e	; 62
     7ce:	e4 97       	sbiw	r28, 0x34	; 52
     7d0:	cd bf       	out	0x3d, r28	; 61
     7d2:	de bf       	out	0x3e, r29	; 62
     7d4:	8c 01       	movw	r16, r24
	//Function used to send the PT100 temperature to the Nextion
	char temp_str[50] = "";
     7d6:	19 82       	std	Y+1, r1	; 0x01
     7d8:	1a 82       	std	Y+2, r1	; 0x02
     7da:	fe 01       	movw	r30, r28
     7dc:	33 96       	adiw	r30, 0x03	; 3
     7de:	80 e3       	ldi	r24, 0x30	; 48
     7e0:	df 01       	movw	r26, r30
     7e2:	1d 92       	st	X+, r1
     7e4:	8a 95       	dec	r24
     7e6:	e9 f7       	brne	.-6      	; 0x7e2 <send_temp+0x20>
	char *temp_ptr = temp_str;
     7e8:	ce 01       	movw	r24, r28
     7ea:	01 96       	adiw	r24, 0x01	; 1
     7ec:	8b ab       	std	Y+51, r24	; 0x33
     7ee:	9c ab       	std	Y+52, r25	; 0x34
	//Send TP100 temperature to the Nextion
	strcpy(temp_str, command);
     7f0:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <strcpy>
	add_int_to_str(temp, &temp_ptr);
     7f4:	be 01       	movw	r22, r28
     7f6:	6d 5c       	subi	r22, 0xCD	; 205
     7f8:	7f 4f       	sbci	r23, 0xFF	; 255
     7fa:	c8 01       	movw	r24, r16
     7fc:	0e 94 9f 01 	call	0x33e	; 0x33e <add_int_to_str>
	uart_send_bytes(temp_ptr);
     800:	8b a9       	ldd	r24, Y+51	; 0x33
     802:	9c a9       	ldd	r25, Y+52	; 0x34
     804:	0e 94 99 03 	call	0x732	; 0x732 <uart_send_bytes>
}
     808:	e4 96       	adiw	r28, 0x34	; 52
     80a:	cd bf       	out	0x3d, r28	; 61
     80c:	de bf       	out	0x3e, r29	; 62
     80e:	df 91       	pop	r29
     810:	cf 91       	pop	r28
     812:	1f 91       	pop	r17
     814:	0f 91       	pop	r16
     816:	08 95       	ret

00000818 <check_door_state>:
}

void check_door_state()
{
	//Since PIN2 is set high with the internal pull up resistor, the pin will be set to low if the door is opened (switched triggered)
	if(!(PORTA.IN & PIN2_bm)){
     818:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x7de608>
     81c:	82 fd       	sbrc	r24, 2
     81e:	34 c0       	rjmp	.+104    	; 0x888 <check_door_state+0x70>
		//Pin is low
		//get tick number of how long the pin was pulled low
		door_ticks = tick_current - door_ticks_ref;
     820:	80 91 43 21 	lds	r24, 0x2143	; 0x802143 <tick_current>
     824:	90 91 44 21 	lds	r25, 0x2144	; 0x802144 <tick_current+0x1>
     828:	a0 91 45 21 	lds	r26, 0x2145	; 0x802145 <tick_current+0x2>
     82c:	b0 91 46 21 	lds	r27, 0x2146	; 0x802146 <tick_current+0x3>
     830:	40 91 4b 21 	lds	r20, 0x214B	; 0x80214b <door_ticks_ref>
     834:	50 91 4c 21 	lds	r21, 0x214C	; 0x80214c <door_ticks_ref+0x1>
     838:	60 91 4d 21 	lds	r22, 0x214D	; 0x80214d <door_ticks_ref+0x2>
     83c:	70 91 4e 21 	lds	r23, 0x214E	; 0x80214e <door_ticks_ref+0x3>
     840:	84 1b       	sub	r24, r20
     842:	95 0b       	sbc	r25, r21
     844:	a6 0b       	sbc	r26, r22
     846:	b7 0b       	sbc	r27, r23
     848:	80 93 47 21 	sts	0x2147, r24	; 0x802147 <door_ticks>
     84c:	90 93 48 21 	sts	0x2148, r25	; 0x802148 <door_ticks+0x1>
     850:	a0 93 49 21 	sts	0x2149, r26	; 0x802149 <door_ticks+0x2>
     854:	b0 93 4a 21 	sts	0x214A, r27	; 0x80214a <door_ticks+0x3>
		//If the pin was pulled low for 500ms then the door was opened
		if(dooropen == false && door_ticks >= 50)
     858:	20 91 4f 21 	lds	r18, 0x214F	; 0x80214f <dooropen>
     85c:	21 11       	cpse	r18, r1
     85e:	32 c0       	rjmp	.+100    	; 0x8c4 <check_door_state+0xac>
     860:	c2 97       	sbiw	r24, 0x32	; 50
     862:	a1 05       	cpc	r26, r1
     864:	b1 05       	cpc	r27, r1
     866:	70 f1       	brcs	.+92     	; 0x8c4 <check_door_state+0xac>
		{
			uart_send_bytes("page0.door_switch.val=1");
     868:	89 e0       	ldi	r24, 0x09	; 9
     86a:	90 e2       	ldi	r25, 0x20	; 32
     86c:	0e 94 99 03 	call	0x732	; 0x732 <uart_send_bytes>
			dooropen = true;
     870:	81 e0       	ldi	r24, 0x01	; 1
     872:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <dooropen>
			//Stop plate rotation
			VSD_FORWARD_OFF;
     876:	e0 e8       	ldi	r30, 0x80	; 128
     878:	f6 e0       	ldi	r31, 0x06	; 6
     87a:	88 e0       	ldi	r24, 0x08	; 8
     87c:	86 83       	std	Z+6, r24	; 0x06
			VSD_REVERSE_OFF;
     87e:	84 e0       	ldi	r24, 0x04	; 4
     880:	86 83       	std	Z+6, r24	; 0x06
			//Turn off repeat timeout chime
			repeat_chime = false;		
     882:	10 92 55 21 	sts	0x2155, r1	; 0x802155 <repeat_chime>
     886:	08 95       	ret
		}
	}
	else if ((PORTA.IN & PIN2_bm)){
     888:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x7de608>
     88c:	82 ff       	sbrs	r24, 2
     88e:	1a c0       	rjmp	.+52     	; 0x8c4 <check_door_state+0xac>
		//Pin is high
		//resume program
		if(dooropen == true)
     890:	80 91 4f 21 	lds	r24, 0x214F	; 0x80214f <dooropen>
     894:	88 23       	and	r24, r24
     896:	31 f0       	breq	.+12     	; 0x8a4 <check_door_state+0x8c>
		{
			uart_send_bytes("page0.door_switch.val=0");
     898:	81 e2       	ldi	r24, 0x21	; 33
     89a:	90 e2       	ldi	r25, 0x20	; 32
     89c:	0e 94 99 03 	call	0x732	; 0x732 <uart_send_bytes>
			dooropen = false;
     8a0:	10 92 4f 21 	sts	0x214F, r1	; 0x80214f <dooropen>
		}
		door_ticks_ref = tick_current;
     8a4:	80 91 43 21 	lds	r24, 0x2143	; 0x802143 <tick_current>
     8a8:	90 91 44 21 	lds	r25, 0x2144	; 0x802144 <tick_current+0x1>
     8ac:	a0 91 45 21 	lds	r26, 0x2145	; 0x802145 <tick_current+0x2>
     8b0:	b0 91 46 21 	lds	r27, 0x2146	; 0x802146 <tick_current+0x3>
     8b4:	80 93 4b 21 	sts	0x214B, r24	; 0x80214b <door_ticks_ref>
     8b8:	90 93 4c 21 	sts	0x214C, r25	; 0x80214c <door_ticks_ref+0x1>
     8bc:	a0 93 4d 21 	sts	0x214D, r26	; 0x80214d <door_ticks_ref+0x2>
     8c0:	b0 93 4e 21 	sts	0x214E, r27	; 0x80214e <door_ticks_ref+0x3>
     8c4:	08 95       	ret

000008c6 <check_heating_elements>:
	//this function checks if the heating elements are operating properly
	//if in 20min the temp of the elements does not reach the temp ref the elements are broken
	int16_t temp_diff_dome = 0;
	int16_t temp_diff_plate = 0;
	//temp difference shouldn't be greater than 20 degrees
	temp_diff_dome = temp_plate.setpoint - PT100_Plate;
     8c6:	80 91 c6 21 	lds	r24, 0x21C6	; 0x8021c6 <temp_plate>
     8ca:	90 91 c7 21 	lds	r25, 0x21C7	; 0x8021c7 <temp_plate+0x1>
     8ce:	20 91 5a 21 	lds	r18, 0x215A	; 0x80215a <PT100_Plate>
     8d2:	30 91 5b 21 	lds	r19, 0x215B	; 0x80215b <PT100_Plate+0x1>
     8d6:	82 1b       	sub	r24, r18
     8d8:	93 0b       	sbc	r25, r19
	temp_diff_plate = temp_dome.setpoint - PT100_Dome;
     8da:	20 91 70 21 	lds	r18, 0x2170	; 0x802170 <temp_dome>
     8de:	30 91 71 21 	lds	r19, 0x2171	; 0x802171 <temp_dome+0x1>
     8e2:	40 91 5c 21 	lds	r20, 0x215C	; 0x80215c <PT100_Dome>
     8e6:	50 91 5d 21 	lds	r21, 0x215D	; 0x80215d <PT100_Dome+0x1>
     8ea:	24 1b       	sub	r18, r20
     8ec:	35 0b       	sbc	r19, r21
	//if both elements reach the set temperature (within 20 degrees) they work properly
	if(temp_diff_dome <= 20 && temp_diff_plate <= 20){
     8ee:	45 97       	sbiw	r24, 0x15	; 21
     8f0:	34 f4       	brge	.+12     	; 0x8fe <check_heating_elements+0x38>
     8f2:	25 31       	cpi	r18, 0x15	; 21
     8f4:	31 05       	cpc	r19, r1
     8f6:	1c f4       	brge	.+6      	; 0x8fe <check_heating_elements+0x38>
		elements_work = true;
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	80 93 2f 21 	sts	0x212F, r24	; 0x80212f <elements_work>
	}
	
	if(send_error == true){
     8fe:	80 91 2e 21 	lds	r24, 0x212E	; 0x80212e <send_error>
     902:	88 23       	and	r24, r24
     904:	21 f0       	breq	.+8      	; 0x90e <check_heating_elements+0x48>
		//if the elements don't work, send error to nextion
		uart_send_bytes("page0.element_error.val=1");
     906:	89 e3       	ldi	r24, 0x39	; 57
     908:	90 e2       	ldi	r25, 0x20	; 32
     90a:	0e 94 99 03 	call	0x732	; 0x732 <uart_send_bytes>
     90e:	08 95       	ret

00000910 <toggle_oven_lamp>:
}

void toggle_oven_lamp(uint8_t input)
{
	//Function to toggle the Oven Lamp 
	if(input == 1)
     910:	81 30       	cpi	r24, 0x01	; 1
     912:	19 f4       	brne	.+6      	; 0x91a <toggle_oven_lamp+0xa>
	{
		OVEN_LAMP_ON;
     914:	80 93 e5 07 	sts	0x07E5, r24	; 0x8007e5 <__TEXT_REGION_LENGTH__+0x7de7e5>
     918:	08 95       	ret
	}
	else
	{
		OVEN_LAMP_OFF;
     91a:	81 e0       	ldi	r24, 0x01	; 1
     91c:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <__TEXT_REGION_LENGTH__+0x7de7e6>
     920:	08 95       	ret

00000922 <set_VSD_speed>:
{
	//function used to set the speed of the VSD via the DAC on PB2
	float spd_percentage = 0.0;
	uint16_t speed_12bit = 0;
	//Calculate the output speed as a 12bit (0-4096) digital value
	spd_percentage = 4096 * (float)spd/MAX_SPEED;
     922:	68 2f       	mov	r22, r24
     924:	70 e0       	ldi	r23, 0x00	; 0
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	0e 94 b4 0b 	call	0x1768	; 0x1768 <__floatunsisf>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e8       	ldi	r20, 0x80	; 128
     934:	55 e4       	ldi	r21, 0x45	; 69
     936:	0e 94 42 0c 	call	0x1884	; 0x1884 <__mulsf3>
     93a:	20 e0       	ldi	r18, 0x00	; 0
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	48 ec       	ldi	r20, 0xC8	; 200
     940:	52 e4       	ldi	r21, 0x42	; 66
     942:	0e 94 13 0b 	call	0x1626	; 0x1626 <__divsf3>
	speed_12bit = (uint16_t)spd_percentage;
     946:	0e 94 85 0b 	call	0x170a	; 0x170a <__fixunssfsi>
	//wait to write to channel 1
	while(!(DACB.STATUS & DAC_CH0DRE_bm)){}
     94a:	20 91 25 03 	lds	r18, 0x0325	; 0x800325 <__TEXT_REGION_LENGTH__+0x7de325>
     94e:	20 ff       	sbrs	r18, 0
     950:	fc cf       	rjmp	.-8      	; 0x94a <set_VSD_speed+0x28>
	//send 12bit value to DAC Data register
	DACB.CH0DATA = speed_12bit;
     952:	60 93 38 03 	sts	0x0338, r22	; 0x800338 <__TEXT_REGION_LENGTH__+0x7de338>
     956:	70 93 39 03 	sts	0x0339, r23	; 0x800339 <__TEXT_REGION_LENGTH__+0x7de339>
     95a:	08 95       	ret

0000095c <check_bake_state>:

//-------------------------------State Functions--------------------------------------//

void check_bake_state()
{
	if(bake_state == 1)
     95c:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <bake_state>
     960:	81 30       	cpi	r24, 0x01	; 1
     962:	11 f5       	brne	.+68     	; 0x9a8 <check_bake_state+0x4c>
	{
		//RUN state
		//Start Baking Process
		//Only execute once
		//Buzzer sound
		if(buzzer_on==true)
     964:	80 91 08 20 	lds	r24, 0x2008	; 0x802008 <buzzer_on>
     968:	88 23       	and	r24, r24
     96a:	71 f0       	breq	.+28     	; 0x988 <check_bake_state+0x2c>
		{
			//Pressed Start button sounds
			BUZZER_ON;
     96c:	e0 e4       	ldi	r30, 0x40	; 64
     96e:	f6 e0       	ldi	r31, 0x06	; 6
     970:	80 e8       	ldi	r24, 0x80	; 128
     972:	85 83       	std	Z+5, r24	; 0x05
     974:	2f ef       	ldi	r18, 0xFF	; 255
     976:	30 e7       	ldi	r19, 0x70	; 112
     978:	92 e0       	ldi	r25, 0x02	; 2
     97a:	21 50       	subi	r18, 0x01	; 1
     97c:	30 40       	sbci	r19, 0x00	; 0
     97e:	90 40       	sbci	r25, 0x00	; 0
     980:	e1 f7       	brne	.-8      	; 0x97a <check_bake_state+0x1e>
     982:	00 c0       	rjmp	.+0      	; 0x984 <check_bake_state+0x28>
     984:	00 00       	nop
			_delay_ms(400);
			BUZZER_OFF;
     986:	86 83       	std	Z+6, r24	; 0x06
		}
		//Set Plate rotation speed
		set_VSD_speed(plate_speed);
     988:	80 91 57 21 	lds	r24, 0x2157	; 0x802157 <plate_speed>
     98c:	0e 94 91 04 	call	0x922	; 0x922 <set_VSD_speed>
		//make sure plate reverse (left) direction is off
		VSD_REVERSE_OFF;
     990:	e0 e8       	ldi	r30, 0x80	; 128
     992:	f6 e0       	ldi	r31, 0x06	; 6
     994:	84 e0       	ldi	r24, 0x04	; 4
     996:	86 83       	std	Z+6, r24	; 0x06
		//Start plate forward (right) rotation
		VSD_FORWARD_ON;
     998:	88 e0       	ldi	r24, 0x08	; 8
     99a:	85 83       	std	Z+5, r24	; 0x05
		//Set Fan on
		fan_on = true;
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	80 93 34 21 	sts	0x2134, r24	; 0x802134 <fan_on>
		//Set main contact on
		main_contact_on = true;
     9a2:	80 93 3a 21 	sts	0x213A, r24	; 0x80213a <main_contact_on>
     9a6:	3c c0       	rjmp	.+120    	; 0xa20 <check_bake_state+0xc4>
		
	}
	//Stop the baking process if the stop signal was sent 
	else if(bake_state == 0)
     9a8:	81 11       	cpse	r24, r1
     9aa:	33 c0       	rjmp	.+102    	; 0xa12 <check_bake_state+0xb6>
	{
		//OFF state
		//Stop baking Process
		//Only execute once
		//Buzzer sound
		if(buzzer_on==true){
     9ac:	80 91 08 20 	lds	r24, 0x2008	; 0x802008 <buzzer_on>
     9b0:	88 23       	and	r24, r24
     9b2:	11 f1       	breq	.+68     	; 0x9f8 <check_bake_state+0x9c>
			//Pressed Stop button sound
			BUZZER_ON;
     9b4:	e0 e4       	ldi	r30, 0x40	; 64
     9b6:	f6 e0       	ldi	r31, 0x06	; 6
     9b8:	80 e8       	ldi	r24, 0x80	; 128
     9ba:	85 83       	std	Z+5, r24	; 0x05
     9bc:	2f e7       	ldi	r18, 0x7F	; 127
     9be:	38 e3       	ldi	r19, 0x38	; 56
     9c0:	91 e0       	ldi	r25, 0x01	; 1
     9c2:	21 50       	subi	r18, 0x01	; 1
     9c4:	30 40       	sbci	r19, 0x00	; 0
     9c6:	90 40       	sbci	r25, 0x00	; 0
     9c8:	e1 f7       	brne	.-8      	; 0x9c2 <check_bake_state+0x66>
     9ca:	00 c0       	rjmp	.+0      	; 0x9cc <check_bake_state+0x70>
     9cc:	00 00       	nop
			_delay_ms(200);
			BUZZER_OFF;
     9ce:	86 83       	std	Z+6, r24	; 0x06
     9d0:	2f e7       	ldi	r18, 0x7F	; 127
     9d2:	38 e3       	ldi	r19, 0x38	; 56
     9d4:	91 e0       	ldi	r25, 0x01	; 1
     9d6:	21 50       	subi	r18, 0x01	; 1
     9d8:	30 40       	sbci	r19, 0x00	; 0
     9da:	90 40       	sbci	r25, 0x00	; 0
     9dc:	e1 f7       	brne	.-8      	; 0x9d6 <check_bake_state+0x7a>
     9de:	00 c0       	rjmp	.+0      	; 0x9e0 <check_bake_state+0x84>
     9e0:	00 00       	nop
			_delay_ms(200);
			BUZZER_ON;
     9e2:	85 83       	std	Z+5, r24	; 0x05
     9e4:	2f e7       	ldi	r18, 0x7F	; 127
     9e6:	38 e3       	ldi	r19, 0x38	; 56
     9e8:	91 e0       	ldi	r25, 0x01	; 1
     9ea:	21 50       	subi	r18, 0x01	; 1
     9ec:	30 40       	sbci	r19, 0x00	; 0
     9ee:	90 40       	sbci	r25, 0x00	; 0
     9f0:	e1 f7       	brne	.-8      	; 0x9ea <check_bake_state+0x8e>
     9f2:	00 c0       	rjmp	.+0      	; 0x9f4 <check_bake_state+0x98>
     9f4:	00 00       	nop
			_delay_ms(200);
			BUZZER_OFF;
     9f6:	86 83       	std	Z+6, r24	; 0x06
		}
		//Stop plate rotation
		VSD_FORWARD_OFF;
     9f8:	e0 e8       	ldi	r30, 0x80	; 128
     9fa:	f6 e0       	ldi	r31, 0x06	; 6
     9fc:	88 e0       	ldi	r24, 0x08	; 8
     9fe:	86 83       	std	Z+6, r24	; 0x06
		VSD_REVERSE_OFF;
     a00:	84 e0       	ldi	r24, 0x04	; 4
     a02:	86 83       	std	Z+6, r24	; 0x06
		//Set Fan OFF
		fan_on = false;
     a04:	10 92 34 21 	sts	0x2134, r1	; 0x802134 <fan_on>
		//set Main contact off
		main_contact_on = false;
     a08:	10 92 3a 21 	sts	0x213A, r1	; 0x80213a <main_contact_on>
		//Turn off repeat timeout chime
		repeat_chime = false;
     a0c:	10 92 55 21 	sts	0x2155, r1	; 0x802155 <repeat_chime>
     a10:	07 c0       	rjmp	.+14     	; 0xa20 <check_bake_state+0xc4>
			
	}
	else if(bake_state == 2){
     a12:	82 30       	cpi	r24, 0x02	; 2
     a14:	29 f4       	brne	.+10     	; 0xa20 <check_bake_state+0xc4>
		//Preheat state
		//set main contact on
		main_contact_on = true;
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	80 93 3a 21 	sts	0x213A, r24	; 0x80213a <main_contact_on>
		//set fan on
		fan_on = true;
     a1c:	80 93 34 21 	sts	0x2134, r24	; 0x802134 <fan_on>
	}
	//Once executed put bake state into idle
	bake_state = 3;
     a20:	83 e0       	ldi	r24, 0x03	; 3
     a22:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <bake_state>
     a26:	08 95       	ret

00000a28 <turn_plate_left>:
	}
	
}

void turn_plate_left(uint8_t input)
{
     a28:	cf 93       	push	r28
     a2a:	c8 2f       	mov	r28, r24
	set_VSD_speed(IDLE_SPEED);
     a2c:	82 e3       	ldi	r24, 0x32	; 50
     a2e:	0e 94 91 04 	call	0x922	; 0x922 <set_VSD_speed>
	if(input == 1)
     a32:	c1 30       	cpi	r28, 0x01	; 1
     a34:	39 f4       	brne	.+14     	; 0xa44 <turn_plate_left+0x1c>
	{
		//Ensure plate forward direction is OFF
		VSD_FORWARD_OFF;
     a36:	e0 e8       	ldi	r30, 0x80	; 128
     a38:	f6 e0       	ldi	r31, 0x06	; 6
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	86 83       	std	Z+6, r24	; 0x06
		//Turn VSD Reverse ON
		VSD_REVERSE_ON;
     a3e:	84 e0       	ldi	r24, 0x04	; 4
     a40:	85 83       	std	Z+5, r24	; 0x05
     a42:	03 c0       	rjmp	.+6      	; 0xa4a <turn_plate_left+0x22>
	}
	else
	{
		//Turn VSD Reverse OFF
		VSD_REVERSE_OFF;
     a44:	84 e0       	ldi	r24, 0x04	; 4
     a46:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x7de686>
	}
}
     a4a:	cf 91       	pop	r28
     a4c:	08 95       	ret

00000a4e <turn_plate_right>:

void turn_plate_right(uint8_t input)
{
     a4e:	cf 93       	push	r28
     a50:	c8 2f       	mov	r28, r24
	set_VSD_speed(IDLE_SPEED);
     a52:	82 e3       	ldi	r24, 0x32	; 50
     a54:	0e 94 91 04 	call	0x922	; 0x922 <set_VSD_speed>
	if(input == 1)
     a58:	c1 30       	cpi	r28, 0x01	; 1
     a5a:	39 f4       	brne	.+14     	; 0xa6a <turn_plate_right+0x1c>
	{
		//Ensure plate reverse direction is OFF
		VSD_REVERSE_OFF;
     a5c:	e0 e8       	ldi	r30, 0x80	; 128
     a5e:	f6 e0       	ldi	r31, 0x06	; 6
     a60:	84 e0       	ldi	r24, 0x04	; 4
     a62:	86 83       	std	Z+6, r24	; 0x06
		//Turn VSD Forward ON
		VSD_FORWARD_ON;
     a64:	88 e0       	ldi	r24, 0x08	; 8
     a66:	85 83       	std	Z+5, r24	; 0x05
     a68:	03 c0       	rjmp	.+6      	; 0xa70 <turn_plate_right+0x22>
		
	}
	else
	{
		//Turn VSD Forward OFF
		VSD_FORWARD_OFF;
     a6a:	88 e0       	ldi	r24, 0x08	; 8
     a6c:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x7de686>
	}
}
     a70:	cf 91       	pop	r28
     a72:	08 95       	ret

00000a74 <write_to_EEPROM_16>:
	DACB.CH0DATA = speed_12bit;
}

//-----------------------------EEPROM READ/WRITE Functions -------------------------------------//

void write_to_EEPROM_16(uint8_t page_addr ,uint8_t byte1_addr, uint8_t byte2_addr, uint16_t data){
     a74:	ff 92       	push	r15
     a76:	0f 93       	push	r16
     a78:	1f 93       	push	r17
     a7a:	cf 93       	push	r28
     a7c:	df 93       	push	r29
     a7e:	18 2f       	mov	r17, r24
     a80:	f6 2e       	mov	r15, r22
     a82:	04 2f       	mov	r16, r20
	//function that writes 16bit data to a certain address location
	uint8_t data_1 = 0;
	uint8_t data_2 = 0;
	//To prevent overflow we store the 16bit value as 2x 8bit values (the data write register for the EEPROM is only 8bits)
	if(data >= 256){
     a84:	2f 3f       	cpi	r18, 0xFF	; 255
     a86:	31 05       	cpc	r19, r1
     a88:	29 f0       	breq	.+10     	; 0xa94 <write_to_EEPROM_16+0x20>
     a8a:	20 f0       	brcs	.+8      	; 0xa94 <write_to_EEPROM_16+0x20>
		data_1 = 255;
		data_2 = data - data_1;
     a8c:	d1 e0       	ldi	r29, 0x01	; 1
     a8e:	d2 0f       	add	r29, r18
	//function that writes 16bit data to a certain address location
	uint8_t data_1 = 0;
	uint8_t data_2 = 0;
	//To prevent overflow we store the 16bit value as 2x 8bit values (the data write register for the EEPROM is only 8bits)
	if(data >= 256){
		data_1 = 255;
     a90:	cf ef       	ldi	r28, 0xFF	; 255
     a92:	02 c0       	rjmp	.+4      	; 0xa98 <write_to_EEPROM_16+0x24>
		data_2 = data - data_1;
	}
	else
	{
		data_1 = data;
     a94:	c2 2f       	mov	r28, r18
		data_2 = 0;
     a96:	d0 e0       	ldi	r29, 0x00	; 0
	}
	//Flush EEPROM buffer
	EEPROM_FlushBuffer();
     a98:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <EEPROM_FlushBuffer>
	//Write the 16bit data as 2x 8bit values to the page buffer
	EEPROM_WriteByte(page_addr, byte1_addr, data_1);
     a9c:	4c 2f       	mov	r20, r28
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	6f 2d       	mov	r22, r15
     aa2:	81 2f       	mov	r24, r17
     aa4:	0e 94 75 0a 	call	0x14ea	; 0x14ea <EEPROM_WriteByte>
	EEPROM_WriteByte(page_addr, byte2_addr, data_2);
     aa8:	4d 2f       	mov	r20, r29
     aaa:	50 e0       	ldi	r21, 0x00	; 0
     aac:	60 2f       	mov	r22, r16
     aae:	81 2f       	mov	r24, r17
     ab0:	0e 94 75 0a 	call	0x14ea	; 0x14ea <EEPROM_WriteByte>
}
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	1f 91       	pop	r17
     aba:	0f 91       	pop	r16
     abc:	ff 90       	pop	r15
     abe:	08 95       	ret

00000ac0 <write_to_EEPROM_8>:

void write_to_EEPROM_8(uint8_t page_addr ,uint8_t byte1_addr, uint16_t data){
     ac0:	0f 93       	push	r16
     ac2:	1f 93       	push	r17
     ac4:	cf 93       	push	r28
     ac6:	df 93       	push	r29
     ac8:	c8 2f       	mov	r28, r24
     aca:	d6 2f       	mov	r29, r22
     acc:	8a 01       	movw	r16, r20
	//function that writes 8bit data to a certain address location
	//Flush EEPROM buffer
	EEPROM_FlushBuffer();
     ace:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <EEPROM_FlushBuffer>
	//write 8bit value to page buffer
	EEPROM_WriteByte(page_addr, byte1_addr, data);
     ad2:	a8 01       	movw	r20, r16
     ad4:	6d 2f       	mov	r22, r29
     ad6:	8c 2f       	mov	r24, r28
     ad8:	0e 94 75 0a 	call	0x14ea	; 0x14ea <EEPROM_WriteByte>
}
     adc:	df 91       	pop	r29
     ade:	cf 91       	pop	r28
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	08 95       	ret

00000ae6 <reset_EEPROM_values>:
	}
}

void reset_EEPROM_values(){
	//This function writes all first initial values to the EEPROM - Can be used if the data gets corrupted
	write_to_EEPROM_16(TEMP_PAGE_ADDR, TEMP_D_ADDR_1, TEMP_D_ADDR_2, initial_temp_d);
     ae6:	20 91 03 20 	lds	r18, 0x2003	; 0x802003 <initial_temp_d>
     aea:	30 91 04 20 	lds	r19, 0x2004	; 0x802004 <initial_temp_d+0x1>
     aee:	48 e0       	ldi	r20, 0x08	; 8
     af0:	60 e0       	ldi	r22, 0x00	; 0
     af2:	80 e0       	ldi	r24, 0x00	; 0
     af4:	0e 94 3a 05 	call	0xa74	; 0xa74 <write_to_EEPROM_16>
     af8:	83 ef       	ldi	r24, 0xF3	; 243
     afa:	91 e0       	ldi	r25, 0x01	; 1
     afc:	01 97       	sbiw	r24, 0x01	; 1
     afe:	f1 f7       	brne	.-4      	; 0xafc <reset_EEPROM_values+0x16>
     b00:	00 c0       	rjmp	.+0      	; 0xb02 <reset_EEPROM_values+0x1c>
     b02:	00 00       	nop
	_delay_ms(1);
	write_to_EEPROM_16(TEMP_PAGE_ADDR, TEMP_P_ADDR_1, TEMP_P_ADDR_2, initial_temp_p);
     b04:	20 91 05 20 	lds	r18, 0x2005	; 0x802005 <initial_temp_p>
     b08:	30 91 06 20 	lds	r19, 0x2006	; 0x802006 <initial_temp_p+0x1>
     b0c:	48 e1       	ldi	r20, 0x18	; 24
     b0e:	60 e1       	ldi	r22, 0x10	; 16
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	0e 94 3a 05 	call	0xa74	; 0xa74 <write_to_EEPROM_16>
	write_to_EEPROM_8(REMAIN_PAGE_ADDR, ROT_SPEED_ADDR, initial_rot_spd);
     b16:	40 91 02 20 	lds	r20, 0x2002	; 0x802002 <initial_rot_spd>
     b1a:	50 e0       	ldi	r21, 0x00	; 0
     b1c:	60 e0       	ldi	r22, 0x00	; 0
     b1e:	82 e0       	ldi	r24, 0x02	; 2
     b20:	0e 94 60 05 	call	0xac0	; 0xac0 <write_to_EEPROM_8>
	write_to_EEPROM_8(REMAIN_PAGE_ADDR, BAKE_TIME_M_ADDR, initial_bake_time_m);
     b24:	40 91 01 20 	lds	r20, 0x2001	; 0x802001 <initial_bake_time_m>
     b28:	50 e0       	ldi	r21, 0x00	; 0
     b2a:	68 e0       	ldi	r22, 0x08	; 8
     b2c:	82 e0       	ldi	r24, 0x02	; 2
     b2e:	0e 94 60 05 	call	0xac0	; 0xac0 <write_to_EEPROM_8>
	write_to_EEPROM_8(REMAIN_PAGE_ADDR, BAKE_TIME_S_ADDR, initial_bake_time_s);
     b32:	40 91 2d 21 	lds	r20, 0x212D	; 0x80212d <initial_bake_time_s>
     b36:	50 e0       	ldi	r21, 0x00	; 0
     b38:	60 e1       	ldi	r22, 0x10	; 16
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	0e 94 60 05 	call	0xac0	; 0xac0 <write_to_EEPROM_8>
     b40:	83 ef       	ldi	r24, 0xF3	; 243
     b42:	91 e0       	ldi	r25, 0x01	; 1
     b44:	01 97       	sbiw	r24, 0x01	; 1
     b46:	f1 f7       	brne	.-4      	; 0xb44 <reset_EEPROM_values+0x5e>
     b48:	00 c0       	rjmp	.+0      	; 0xb4a <reset_EEPROM_values+0x64>
     b4a:	00 00       	nop
	_delay_ms(1);
	write_to_EEPROM_8(REMAIN_PAGE_ADDR, BUZZER_ADDR, initial_buzzer_on);
     b4c:	40 91 00 20 	lds	r20, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
     b50:	50 e0       	ldi	r21, 0x00	; 0
     b52:	68 e1       	ldi	r22, 0x18	; 24
     b54:	82 e0       	ldi	r24, 0x02	; 2
     b56:	0e 94 60 05 	call	0xac0	; 0xac0 <write_to_EEPROM_8>
     b5a:	08 95       	ret

00000b5c <data_received_handler>:
	}
	//Stop initialization
	uart_send_bytes("page2.init.val=1");
}

void data_received_handler(uint8_t data[NUM_BYTES]){
     b5c:	0f 93       	push	r16
     b5e:	1f 93       	push	r17
     b60:	cf 93       	push	r28
     b62:	df 93       	push	r29
     b64:	cd b7       	in	r28, 0x3d	; 61
     b66:	de b7       	in	r29, 0x3e	; 62
     b68:	e4 97       	sbiw	r28, 0x34	; 52
     b6a:	cd bf       	out	0x3d, r28	; 61
     b6c:	de bf       	out	0x3e, r29	; 62
	//This function triggers events/functions according to data received via the UART
	uint8_t input_id = data[0];
     b6e:	dc 01       	movw	r26, r24
     b70:	4c 91       	ld	r20, X
	char instr[50] = "";
     b72:	19 82       	std	Y+1, r1	; 0x01
     b74:	1a 82       	std	Y+2, r1	; 0x02
     b76:	de 01       	movw	r26, r28
     b78:	13 96       	adiw	r26, 0x03	; 3
     b7a:	20 e3       	ldi	r18, 0x30	; 48
     b7c:	fd 01       	movw	r30, r26
     b7e:	11 92       	st	Z+, r1
     b80:	2a 95       	dec	r18
     b82:	e9 f7       	brne	.-6      	; 0xb7e <data_received_handler+0x22>
	char *instr_ptr = instr;
     b84:	9e 01       	movw	r18, r28
     b86:	2f 5f       	subi	r18, 0xFF	; 255
     b88:	3f 4f       	sbci	r19, 0xFF	; 255
     b8a:	2b ab       	std	Y+51, r18	; 0x33
     b8c:	3c ab       	std	Y+52, r19	; 0x34
	
	switch (input_id)
     b8e:	50 e0       	ldi	r21, 0x00	; 0
     b90:	fa 01       	movw	r30, r20
     b92:	31 97       	sbiw	r30, 0x01	; 1
     b94:	ea 30       	cpi	r30, 0x0A	; 10
     b96:	f1 05       	cpc	r31, r1
     b98:	08 f0       	brcs	.+2      	; 0xb9c <data_received_handler+0x40>
     b9a:	b7 c0       	rjmp	.+366    	; 0xd0a <data_received_handler+0x1ae>
     b9c:	dc 01       	movw	r26, r24
     b9e:	88 27       	eor	r24, r24
     ba0:	e2 50       	subi	r30, 0x02	; 2
     ba2:	ff 4f       	sbci	r31, 0xFF	; 255
     ba4:	8f 4f       	sbci	r24, 0xFF	; 255
     ba6:	0c 94 e5 0c 	jmp	0x19ca	; 0x19ca <__tablejump2__>
	{
	case 1:
		//Start and Stop input
		if(data[1] == 1){
     baa:	11 96       	adiw	r26, 0x01	; 1
     bac:	8c 91       	ld	r24, X
     bae:	81 30       	cpi	r24, 0x01	; 1
     bb0:	19 f4       	brne	.+6      	; 0xbb8 <data_received_handler+0x5c>
			//start signal
			bake_state = 1;
     bb2:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <bake_state>
     bb6:	a9 c0       	rjmp	.+338    	; 0xd0a <data_received_handler+0x1ae>
		}
		else if(data[1] == 2){
     bb8:	82 30       	cpi	r24, 0x02	; 2
     bba:	19 f4       	brne	.+6      	; 0xbc2 <data_received_handler+0x66>
			//Preheat Start
			bake_state = 2;
     bbc:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <bake_state>
     bc0:	a4 c0       	rjmp	.+328    	; 0xd0a <data_received_handler+0x1ae>
		}
		else 
		{
			//stop signal
			bake_state = 0;
     bc2:	10 92 07 20 	sts	0x2007, r1	; 0x802007 <bake_state>
     bc6:	a1 c0       	rjmp	.+322    	; 0xd0a <data_received_handler+0x1ae>
		}
		break;
	case 2:
		//Turn plate left input
		turn_plate_left(data[1]);
     bc8:	11 96       	adiw	r26, 0x01	; 1
     bca:	8c 91       	ld	r24, X
     bcc:	0e 94 14 05 	call	0xa28	; 0xa28 <turn_plate_left>
		break;
     bd0:	9c c0       	rjmp	.+312    	; 0xd0a <data_received_handler+0x1ae>
	case 3:
		//Turn plate right input
		turn_plate_right(data[1]);
     bd2:	11 96       	adiw	r26, 0x01	; 1
     bd4:	8c 91       	ld	r24, X
     bd6:	0e 94 27 05 	call	0xa4e	; 0xa4e <turn_plate_right>
		break;
     bda:	97 c0       	rjmp	.+302    	; 0xd0a <data_received_handler+0x1ae>
	case 4:
		//Lamp ON or OFF input
		toggle_oven_lamp(data[1]);
     bdc:	11 96       	adiw	r26, 0x01	; 1
     bde:	8c 91       	ld	r24, X
     be0:	0e 94 88 04 	call	0x910	; 0x910 <toggle_oven_lamp>
		break;
     be4:	92 c0       	rjmp	.+292    	; 0xd0a <data_received_handler+0x1ae>
	case 5:
		//Dome temp input
		temp_dome.setpoint = combine_bytes(data[2], data[1]);
     be6:	11 96       	adiw	r26, 0x01	; 1
     be8:	6c 91       	ld	r22, X
     bea:	11 97       	sbiw	r26, 0x01	; 1
     bec:	12 96       	adiw	r26, 0x02	; 2
     bee:	8c 91       	ld	r24, X
     bf0:	0e 94 bf 01 	call	0x37e	; 0x37e <combine_bytes>
     bf4:	00 e7       	ldi	r16, 0x70	; 112
     bf6:	11 e2       	ldi	r17, 0x21	; 33
     bf8:	d8 01       	movw	r26, r16
     bfa:	8d 93       	st	X+, r24
     bfc:	9c 93       	st	X, r25
		//Send temperature confirmation back to the Nextion
		strcpy(instr, "page0.n1.val=");
     bfe:	2e e0       	ldi	r18, 0x0E	; 14
     c00:	e3 e5       	ldi	r30, 0x53	; 83
     c02:	f0 e2       	ldi	r31, 0x20	; 32
     c04:	de 01       	movw	r26, r28
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	01 90       	ld	r0, Z+
     c0a:	0d 92       	st	X+, r0
     c0c:	2a 95       	dec	r18
     c0e:	e1 f7       	brne	.-8      	; 0xc08 <data_received_handler+0xac>
		add_int_to_str(temp_dome.setpoint, &instr_ptr);
     c10:	be 01       	movw	r22, r28
     c12:	6d 5c       	subi	r22, 0xCD	; 205
     c14:	7f 4f       	sbci	r23, 0xFF	; 255
     c16:	0e 94 9f 01 	call	0x33e	; 0x33e <add_int_to_str>
		uart_send_bytes(instr_ptr);
     c1a:	8b a9       	ldd	r24, Y+51	; 0x33
     c1c:	9c a9       	ldd	r25, Y+52	; 0x34
     c1e:	0e 94 99 03 	call	0x732	; 0x732 <uart_send_bytes>
		//Set swell points
		set_temp_swellpoints('d');
     c22:	84 e6       	ldi	r24, 0x64	; 100
     c24:	0e 94 20 02 	call	0x440	; 0x440 <set_temp_swellpoints>
		//write to EEPROM
		write_to_EEPROM_16(TEMP_PAGE_ADDR, TEMP_D_ADDR_1, TEMP_D_ADDR_2, temp_dome.setpoint);
     c28:	f8 01       	movw	r30, r16
     c2a:	20 81       	ld	r18, Z
     c2c:	31 81       	ldd	r19, Z+1	; 0x01
     c2e:	48 e0       	ldi	r20, 0x08	; 8
     c30:	60 e0       	ldi	r22, 0x00	; 0
     c32:	80 e0       	ldi	r24, 0x00	; 0
     c34:	0e 94 3a 05 	call	0xa74	; 0xa74 <write_to_EEPROM_16>
		break;
     c38:	68 c0       	rjmp	.+208    	; 0xd0a <data_received_handler+0x1ae>
	case 6:
		//Plate temp input
		temp_plate.setpoint = combine_bytes(data[2], data[1]);
     c3a:	11 96       	adiw	r26, 0x01	; 1
     c3c:	6c 91       	ld	r22, X
     c3e:	11 97       	sbiw	r26, 0x01	; 1
     c40:	12 96       	adiw	r26, 0x02	; 2
     c42:	8c 91       	ld	r24, X
     c44:	0e 94 bf 01 	call	0x37e	; 0x37e <combine_bytes>
     c48:	06 ec       	ldi	r16, 0xC6	; 198
     c4a:	11 e2       	ldi	r17, 0x21	; 33
     c4c:	d8 01       	movw	r26, r16
     c4e:	8d 93       	st	X+, r24
     c50:	9c 93       	st	X, r25
		//Send temperature confirmation back to the Nextion
		strcpy(instr, "page0.n0.val=");
     c52:	2e e0       	ldi	r18, 0x0E	; 14
     c54:	e1 e6       	ldi	r30, 0x61	; 97
     c56:	f0 e2       	ldi	r31, 0x20	; 32
     c58:	de 01       	movw	r26, r28
     c5a:	11 96       	adiw	r26, 0x01	; 1
     c5c:	01 90       	ld	r0, Z+
     c5e:	0d 92       	st	X+, r0
     c60:	2a 95       	dec	r18
     c62:	e1 f7       	brne	.-8      	; 0xc5c <data_received_handler+0x100>
		add_int_to_str(temp_plate.setpoint, &instr_ptr);
     c64:	be 01       	movw	r22, r28
     c66:	6d 5c       	subi	r22, 0xCD	; 205
     c68:	7f 4f       	sbci	r23, 0xFF	; 255
     c6a:	0e 94 9f 01 	call	0x33e	; 0x33e <add_int_to_str>
		uart_send_bytes(instr_ptr);
     c6e:	8b a9       	ldd	r24, Y+51	; 0x33
     c70:	9c a9       	ldd	r25, Y+52	; 0x34
     c72:	0e 94 99 03 	call	0x732	; 0x732 <uart_send_bytes>
		//Set well points
		set_temp_swellpoints('p');
     c76:	80 e7       	ldi	r24, 0x70	; 112
     c78:	0e 94 20 02 	call	0x440	; 0x440 <set_temp_swellpoints>
		//write to EEPROM
		write_to_EEPROM_16(TEMP_PAGE_ADDR, TEMP_P_ADDR_1, TEMP_P_ADDR_2, temp_plate.setpoint);
     c7c:	f8 01       	movw	r30, r16
     c7e:	20 81       	ld	r18, Z
     c80:	31 81       	ldd	r19, Z+1	; 0x01
     c82:	48 e1       	ldi	r20, 0x18	; 24
     c84:	60 e1       	ldi	r22, 0x10	; 16
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	0e 94 3a 05 	call	0xa74	; 0xa74 <write_to_EEPROM_16>
		break;
     c8c:	3e c0       	rjmp	.+124    	; 0xd0a <data_received_handler+0x1ae>
	case 7: 
		//Plate speed input
		plate_speed = data[1];
     c8e:	11 96       	adiw	r26, 0x01	; 1
     c90:	4c 91       	ld	r20, X
     c92:	40 93 57 21 	sts	0x2157, r20	; 0x802157 <plate_speed>
		//write to EEPROM
		write_to_EEPROM_8(REMAIN_PAGE_ADDR, ROT_SPEED_ADDR, plate_speed);
     c96:	50 e0       	ldi	r21, 0x00	; 0
     c98:	60 e0       	ldi	r22, 0x00	; 0
     c9a:	82 e0       	ldi	r24, 0x02	; 2
     c9c:	0e 94 60 05 	call	0xac0	; 0xac0 <write_to_EEPROM_8>
		break;
     ca0:	34 c0       	rjmp	.+104    	; 0xd0a <data_received_handler+0x1ae>
	case 8:
		//Bake timer timeout
		if(data[1]==0)
     ca2:	11 96       	adiw	r26, 0x01	; 1
     ca4:	8c 91       	ld	r24, X
     ca6:	81 11       	cpse	r24, r1
     ca8:	04 c0       	rjmp	.+8      	; 0xcb2 <data_received_handler+0x156>
		{
			bake_timeout_flag = true;
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	80 93 56 21 	sts	0x2156, r24	; 0x802156 <bake_timeout_flag>
     cb0:	2c c0       	rjmp	.+88     	; 0xd0a <data_received_handler+0x1ae>
		}
		else if(data[1]==1){
     cb2:	81 30       	cpi	r24, 0x01	; 1
     cb4:	51 f5       	brne	.+84     	; 0xd0a <data_received_handler+0x1ae>
			//Preheat finished
			preheat_chime = true;
     cb6:	80 93 50 21 	sts	0x2150, r24	; 0x802150 <preheat_chime>
     cba:	27 c0       	rjmp	.+78     	; 0xd0a <data_received_handler+0x1ae>
		}
		break;
	case 9:
		//Turn buzzer ON or OFF
		if(data[1] == 0)
     cbc:	11 96       	adiw	r26, 0x01	; 1
     cbe:	4c 91       	ld	r20, X
     cc0:	41 11       	cpse	r20, r1
     cc2:	03 c0       	rjmp	.+6      	; 0xcca <data_received_handler+0x16e>
		{
			buzzer_on = false;
     cc4:	10 92 08 20 	sts	0x2008, r1	; 0x802008 <buzzer_on>
     cc8:	03 c0       	rjmp	.+6      	; 0xcd0 <data_received_handler+0x174>
		}
		else
		{
			buzzer_on = true;
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	80 93 08 20 	sts	0x2008, r24	; 0x802008 <buzzer_on>
		}
		//write to EEPROM
		write_to_EEPROM_8(REMAIN_PAGE_ADDR, BUZZER_ADDR, data[1]);
     cd0:	50 e0       	ldi	r21, 0x00	; 0
     cd2:	68 e1       	ldi	r22, 0x18	; 24
     cd4:	82 e0       	ldi	r24, 0x02	; 2
     cd6:	0e 94 60 05 	call	0xac0	; 0xac0 <write_to_EEPROM_8>
		break;
     cda:	17 c0       	rjmp	.+46     	; 0xd0a <data_received_handler+0x1ae>
	case 10:
		//Bake_time set by user which is saved in the EEPROM
		bake_time.minutes = data[1];
     cdc:	11 96       	adiw	r26, 0x01	; 1
     cde:	4c 91       	ld	r20, X
     ce0:	11 97       	sbiw	r26, 0x01	; 1
     ce2:	0f e5       	ldi	r16, 0x5F	; 95
     ce4:	11 e2       	ldi	r17, 0x21	; 33
     ce6:	f8 01       	movw	r30, r16
     ce8:	40 83       	st	Z, r20
		bake_time.seconds = data[2];
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8c 91       	ld	r24, X
     cee:	81 83       	std	Z+1, r24	; 0x01
		//write values to EEPROM
		write_to_EEPROM_8(REMAIN_PAGE_ADDR, BAKE_TIME_M_ADDR, bake_time.minutes);
     cf0:	50 e0       	ldi	r21, 0x00	; 0
     cf2:	68 e0       	ldi	r22, 0x08	; 8
     cf4:	82 e0       	ldi	r24, 0x02	; 2
     cf6:	0e 94 60 05 	call	0xac0	; 0xac0 <write_to_EEPROM_8>
		write_to_EEPROM_8(REMAIN_PAGE_ADDR, BAKE_TIME_S_ADDR, bake_time.seconds);
     cfa:	d8 01       	movw	r26, r16
     cfc:	11 96       	adiw	r26, 0x01	; 1
     cfe:	4c 91       	ld	r20, X
     d00:	50 e0       	ldi	r21, 0x00	; 0
     d02:	60 e1       	ldi	r22, 0x10	; 16
     d04:	82 e0       	ldi	r24, 0x02	; 2
     d06:	0e 94 60 05 	call	0xac0	; 0xac0 <write_to_EEPROM_8>
	default:
		//unknown input
		break;
	}
	
}
     d0a:	e4 96       	adiw	r28, 0x34	; 52
     d0c:	cd bf       	out	0x3d, r28	; 61
     d0e:	de bf       	out	0x3e, r29	; 62
     d10:	df 91       	pop	r29
     d12:	cf 91       	pop	r28
     d14:	1f 91       	pop	r17
     d16:	0f 91       	pop	r16
     d18:	08 95       	ret

00000d1a <read_from_EEPROM_16>:
	EEPROM_FlushBuffer();
	//write 8bit value to page buffer
	EEPROM_WriteByte(page_addr, byte1_addr, data);
}

uint16_t read_from_EEPROM_16(uint8_t page_addr ,uint8_t byte1_addr, uint8_t byte2_addr){
     d1a:	1f 93       	push	r17
     d1c:	cf 93       	push	r28
     d1e:	df 93       	push	r29
     d20:	c8 2f       	mov	r28, r24
     d22:	14 2f       	mov	r17, r20
	//Function that reads 16bit data from a certain address location
	uint8_t received_data_1 = 0;
	uint8_t received_data_2 = 0;
	received_data_1 = EEPROM_ReadByte(page_addr, byte1_addr);
     d24:	0e 94 35 0a 	call	0x146a	; 0x146a <EEPROM_ReadByte>
     d28:	d8 2f       	mov	r29, r24
	received_data_2 = EEPROM_ReadByte(page_addr, byte2_addr);
     d2a:	61 2f       	mov	r22, r17
     d2c:	8c 2f       	mov	r24, r28
     d2e:	0e 94 35 0a 	call	0x146a	; 0x146a <EEPROM_ReadByte>
	
	//Return 16bit value
	return (received_data_1 + received_data_2);
     d32:	99 27       	eor	r25, r25
}
     d34:	8d 0f       	add	r24, r29
     d36:	91 1d       	adc	r25, r1
     d38:	df 91       	pop	r29
     d3a:	cf 91       	pop	r28
     d3c:	1f 91       	pop	r17
     d3e:	08 95       	ret

00000d40 <read_from_EEPROM_8>:

uint8_t read_from_EEPROM_8(uint8_t page_addr ,uint8_t byte1_addr){
	//Function that reads 8bit data from a certain address location
	return EEPROM_ReadByte(page_addr, byte1_addr);
     d40:	0e 94 35 0a 	call	0x146a	; 0x146a <EEPROM_ReadByte>
}
     d44:	08 95       	ret

00000d46 <initialize_values>:
}

//------------------------------- EventHandler Functions--------------------------------------//

void initialize_values()
{
     d46:	ff 92       	push	r15
     d48:	0f 93       	push	r16
     d4a:	1f 93       	push	r17
     d4c:	cf 93       	push	r28
     d4e:	df 93       	push	r29
     d50:	cd b7       	in	r28, 0x3d	; 61
     d52:	de b7       	in	r29, 0x3e	; 62
     d54:	e4 97       	sbiw	r28, 0x34	; 52
     d56:	cd bf       	out	0x3d, r28	; 61
     d58:	de bf       	out	0x3e, r29	; 62
	//This function initializes all values and sets them according to last operation
	//variables used for uart operation
	char instr[50] = "";
     d5a:	19 82       	std	Y+1, r1	; 0x01
     d5c:	1a 82       	std	Y+2, r1	; 0x02
     d5e:	fe 01       	movw	r30, r28
     d60:	33 96       	adiw	r30, 0x03	; 3
     d62:	80 e3       	ldi	r24, 0x30	; 48
     d64:	df 01       	movw	r26, r30
     d66:	1d 92       	st	X+, r1
     d68:	8a 95       	dec	r24
     d6a:	e9 f7       	brne	.-6      	; 0xd66 <initialize_values+0x20>
	char *instr_ptr = instr;
     d6c:	ce 01       	movw	r24, r28
     d6e:	01 96       	adiw	r24, 0x01	; 1
     d70:	8b ab       	std	Y+51, r24	; 0x33
     d72:	9c ab       	std	Y+52, r25	; 0x34
	
	uint16_t eeprom_return_val = 0;
	
	//First the saved values are fetched from the EEPROM
	//fetch initial temp dome
	eeprom_return_val =  read_from_EEPROM_16(TEMP_PAGE_ADDR, TEMP_D_ADDR_1, TEMP_D_ADDR_2);
     d74:	48 e0       	ldi	r20, 0x08	; 8
     d76:	60 e0       	ldi	r22, 0x00	; 0
     d78:	80 e0       	ldi	r24, 0x00	; 0
     d7a:	0e 94 8d 06 	call	0xd1a	; 0xd1a <read_from_EEPROM_16>
     d7e:	8c 01       	movw	r16, r24
	//Test if value falls within restrictions 
	if(remainder_test(eeprom_return_val, 10) == false && within_limits_test(eeprom_return_val, 20, 400) == true){
     d80:	6a e0       	ldi	r22, 0x0A	; 10
     d82:	0e 94 38 02 	call	0x470	; 0x470 <remainder_test>
     d86:	81 11       	cpse	r24, r1
     d88:	0e c0       	rjmp	.+28     	; 0xda6 <initialize_values+0x60>
     d8a:	40 e9       	ldi	r20, 0x90	; 144
     d8c:	51 e0       	ldi	r21, 0x01	; 1
     d8e:	64 e1       	ldi	r22, 0x14	; 20
     d90:	70 e0       	ldi	r23, 0x00	; 0
     d92:	c8 01       	movw	r24, r16
     d94:	0e 94 41 02 	call	0x482	; 0x482 <within_limits_test>
     d98:	88 23       	and	r24, r24
     d9a:	29 f0       	breq	.+10     	; 0xda6 <initialize_values+0x60>
		initial_temp_d = eeprom_return_val;
     d9c:	00 93 03 20 	sts	0x2003, r16	; 0x802003 <initial_temp_d>
     da0:	10 93 04 20 	sts	0x2004, r17	; 0x802004 <initial_temp_d+0x1>
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <initialize_values+0x64>
	}
	else{
	//If not reset the EEPROM
		reset_EEPROM_values();
     da6:	0e 94 73 05 	call	0xae6	; 0xae6 <reset_EEPROM_values>
	}
	//fetch initial temp plate
	eeprom_return_val = read_from_EEPROM_16(TEMP_PAGE_ADDR, TEMP_P_ADDR_1, TEMP_P_ADDR_2);
     daa:	48 e1       	ldi	r20, 0x18	; 24
     dac:	60 e1       	ldi	r22, 0x10	; 16
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	0e 94 8d 06 	call	0xd1a	; 0xd1a <read_from_EEPROM_16>
     db4:	8c 01       	movw	r16, r24
	//Test if value falls within restrictions
	if(remainder_test(eeprom_return_val, 10) == false && within_limits_test(eeprom_return_val, 20, 400) == true){
     db6:	6a e0       	ldi	r22, 0x0A	; 10
     db8:	0e 94 38 02 	call	0x470	; 0x470 <remainder_test>
     dbc:	81 11       	cpse	r24, r1
     dbe:	0e c0       	rjmp	.+28     	; 0xddc <initialize_values+0x96>
     dc0:	40 e9       	ldi	r20, 0x90	; 144
     dc2:	51 e0       	ldi	r21, 0x01	; 1
     dc4:	64 e1       	ldi	r22, 0x14	; 20
     dc6:	70 e0       	ldi	r23, 0x00	; 0
     dc8:	c8 01       	movw	r24, r16
     dca:	0e 94 41 02 	call	0x482	; 0x482 <within_limits_test>
     dce:	88 23       	and	r24, r24
     dd0:	29 f0       	breq	.+10     	; 0xddc <initialize_values+0x96>
		initial_temp_p = eeprom_return_val;
     dd2:	00 93 05 20 	sts	0x2005, r16	; 0x802005 <initial_temp_p>
     dd6:	10 93 06 20 	sts	0x2006, r17	; 0x802006 <initial_temp_p+0x1>
     dda:	02 c0       	rjmp	.+4      	; 0xde0 <initialize_values+0x9a>
	}
	else{
		//If not reset the EEPROM
		reset_EEPROM_values();
     ddc:	0e 94 73 05 	call	0xae6	; 0xae6 <reset_EEPROM_values>
	}
	//fetch plate rotation speed
	eeprom_return_val = read_from_EEPROM_8(REMAIN_PAGE_ADDR, ROT_SPEED_ADDR);
     de0:	60 e0       	ldi	r22, 0x00	; 0
     de2:	82 e0       	ldi	r24, 0x02	; 2
     de4:	0e 94 a0 06 	call	0xd40	; 0xd40 <read_from_EEPROM_8>
     de8:	18 2f       	mov	r17, r24
	//Test if value falls within restrictions
	if(within_limits_test(eeprom_return_val, 0, 100) == true){
     dea:	44 e6       	ldi	r20, 0x64	; 100
     dec:	50 e0       	ldi	r21, 0x00	; 0
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	0e 94 41 02 	call	0x482	; 0x482 <within_limits_test>
     df8:	88 23       	and	r24, r24
     dfa:	19 f0       	breq	.+6      	; 0xe02 <initialize_values+0xbc>
		initial_rot_spd = eeprom_return_val;
     dfc:	10 93 02 20 	sts	0x2002, r17	; 0x802002 <initial_rot_spd>
     e00:	02 c0       	rjmp	.+4      	; 0xe06 <initialize_values+0xc0>
	}
	else{
		//If not reset the EEPROM
		reset_EEPROM_values();
     e02:	0e 94 73 05 	call	0xae6	; 0xae6 <reset_EEPROM_values>
	}
	//fetch bake time (m)
	eeprom_return_val = read_from_EEPROM_8(REMAIN_PAGE_ADDR, BAKE_TIME_M_ADDR);
     e06:	68 e0       	ldi	r22, 0x08	; 8
     e08:	82 e0       	ldi	r24, 0x02	; 2
     e0a:	0e 94 a0 06 	call	0xd40	; 0xd40 <read_from_EEPROM_8>
     e0e:	18 2f       	mov	r17, r24
	//Test if value falls within restrictions
	if(within_limits_test(eeprom_return_val, 0, 30) == true){
     e10:	4e e1       	ldi	r20, 0x1E	; 30
     e12:	50 e0       	ldi	r21, 0x00	; 0
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	0e 94 41 02 	call	0x482	; 0x482 <within_limits_test>
     e1e:	88 23       	and	r24, r24
     e20:	19 f0       	breq	.+6      	; 0xe28 <initialize_values+0xe2>
		initial_bake_time_m = eeprom_return_val;
     e22:	10 93 01 20 	sts	0x2001, r17	; 0x802001 <initial_bake_time_m>
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <initialize_values+0xe6>
	}
	else{
		//If not reset the EEPROM
		reset_EEPROM_values();
     e28:	0e 94 73 05 	call	0xae6	; 0xae6 <reset_EEPROM_values>
	}
	//fetch bake time (s)
	eeprom_return_val = read_from_EEPROM_8(REMAIN_PAGE_ADDR, BAKE_TIME_S_ADDR);
     e2c:	60 e1       	ldi	r22, 0x10	; 16
     e2e:	82 e0       	ldi	r24, 0x02	; 2
     e30:	0e 94 a0 06 	call	0xd40	; 0xd40 <read_from_EEPROM_8>
     e34:	f8 2e       	mov	r15, r24
     e36:	08 2f       	mov	r16, r24
     e38:	10 e0       	ldi	r17, 0x00	; 0
	//Test if value falls within restrictions
	if(remainder_test(eeprom_return_val, 10) == false && within_limits_test(eeprom_return_val, 0, 10) == true){
     e3a:	6a e0       	ldi	r22, 0x0A	; 10
     e3c:	c8 01       	movw	r24, r16
     e3e:	0e 94 38 02 	call	0x470	; 0x470 <remainder_test>
     e42:	81 11       	cpse	r24, r1
     e44:	0c c0       	rjmp	.+24     	; 0xe5e <initialize_values+0x118>
     e46:	4a e0       	ldi	r20, 0x0A	; 10
     e48:	50 e0       	ldi	r21, 0x00	; 0
     e4a:	60 e0       	ldi	r22, 0x00	; 0
     e4c:	70 e0       	ldi	r23, 0x00	; 0
     e4e:	c8 01       	movw	r24, r16
     e50:	0e 94 41 02 	call	0x482	; 0x482 <within_limits_test>
     e54:	88 23       	and	r24, r24
     e56:	19 f0       	breq	.+6      	; 0xe5e <initialize_values+0x118>
		initial_bake_time_s = eeprom_return_val;
     e58:	f0 92 2d 21 	sts	0x212D, r15	; 0x80212d <initial_bake_time_s>
     e5c:	02 c0       	rjmp	.+4      	; 0xe62 <initialize_values+0x11c>
	}
	else{
		//If not reset the EEPROM
		reset_EEPROM_values();
     e5e:	0e 94 73 05 	call	0xae6	; 0xae6 <reset_EEPROM_values>
	}
	//fetch buzzer on off
	 eeprom_return_val = read_from_EEPROM_8(REMAIN_PAGE_ADDR, BUZZER_ADDR);
     e62:	68 e1       	ldi	r22, 0x18	; 24
     e64:	82 e0       	ldi	r24, 0x02	; 2
     e66:	0e 94 a0 06 	call	0xd40	; 0xd40 <read_from_EEPROM_8>
     e6a:	18 2f       	mov	r17, r24
	//Test if value falls within restrictions
	if(within_limits_test(eeprom_return_val, 0, 1) == true){
     e6c:	41 e0       	ldi	r20, 0x01	; 1
     e6e:	50 e0       	ldi	r21, 0x00	; 0
     e70:	60 e0       	ldi	r22, 0x00	; 0
     e72:	70 e0       	ldi	r23, 0x00	; 0
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	0e 94 41 02 	call	0x482	; 0x482 <within_limits_test>
     e7a:	88 23       	and	r24, r24
     e7c:	19 f0       	breq	.+6      	; 0xe84 <initialize_values+0x13e>
		initial_buzzer_on = eeprom_return_val;
     e7e:	10 93 00 20 	sts	0x2000, r17	; 0x802000 <__DATA_REGION_ORIGIN__>
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <initialize_values+0x142>
	}
	else{
		//If not reset the EEPROM
		reset_EEPROM_values();
     e84:	0e 94 73 05 	call	0xae6	; 0xae6 <reset_EEPROM_values>
	}
	
	//Send initial values to NEXTION
	//Send initial Temperatures
	strcpy(instr, "page0.tempD_ref.val=");
     e88:	85 e1       	ldi	r24, 0x15	; 21
     e8a:	ef e6       	ldi	r30, 0x6F	; 111
     e8c:	f0 e2       	ldi	r31, 0x20	; 32
     e8e:	de 01       	movw	r26, r28
     e90:	11 96       	adiw	r26, 0x01	; 1
     e92:	01 90       	ld	r0, Z+
     e94:	0d 92       	st	X+, r0
     e96:	8a 95       	dec	r24
     e98:	e1 f7       	brne	.-8      	; 0xe92 <initialize_values+0x14c>
	add_int_to_str(initial_temp_d, &instr_ptr);
     e9a:	be 01       	movw	r22, r28
     e9c:	6d 5c       	subi	r22, 0xCD	; 205
     e9e:	7f 4f       	sbci	r23, 0xFF	; 255
     ea0:	80 91 03 20 	lds	r24, 0x2003	; 0x802003 <initial_temp_d>
     ea4:	90 91 04 20 	lds	r25, 0x2004	; 0x802004 <initial_temp_d+0x1>
     ea8:	0e 94 9f 01 	call	0x33e	; 0x33e <add_int_to_str>
	uart_send_bytes(instr_ptr);
     eac:	8b a9       	ldd	r24, Y+51	; 0x33
     eae:	9c a9       	ldd	r25, Y+52	; 0x34
     eb0:	0e 94 99 03 	call	0x732	; 0x732 <uart_send_bytes>
     eb4:	8f e4       	ldi	r24, 0x4F	; 79
     eb6:	93 ec       	ldi	r25, 0xC3	; 195
     eb8:	01 97       	sbiw	r24, 0x01	; 1
     eba:	f1 f7       	brne	.-4      	; 0xeb8 <initialize_values+0x172>
     ebc:	00 c0       	rjmp	.+0      	; 0xebe <initialize_values+0x178>
     ebe:	00 00       	nop
	_delay_ms(100);
	strcpy(instr, "page0.tempP_ref.val=");
     ec0:	85 e1       	ldi	r24, 0x15	; 21
     ec2:	e4 e8       	ldi	r30, 0x84	; 132
     ec4:	f0 e2       	ldi	r31, 0x20	; 32
     ec6:	de 01       	movw	r26, r28
     ec8:	11 96       	adiw	r26, 0x01	; 1
     eca:	01 90       	ld	r0, Z+
     ecc:	0d 92       	st	X+, r0
     ece:	8a 95       	dec	r24
     ed0:	e1 f7       	brne	.-8      	; 0xeca <initialize_values+0x184>
	add_int_to_str(initial_temp_p, &instr_ptr);
     ed2:	be 01       	movw	r22, r28
     ed4:	6d 5c       	subi	r22, 0xCD	; 205
     ed6:	7f 4f       	sbci	r23, 0xFF	; 255
     ed8:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <initial_temp_p>
     edc:	90 91 06 20 	lds	r25, 0x2006	; 0x802006 <initial_temp_p+0x1>
     ee0:	0e 94 9f 01 	call	0x33e	; 0x33e <add_int_to_str>
	uart_send_bytes(instr_ptr);
     ee4:	8b a9       	ldd	r24, Y+51	; 0x33
     ee6:	9c a9       	ldd	r25, Y+52	; 0x34
     ee8:	0e 94 99 03 	call	0x732	; 0x732 <uart_send_bytes>
     eec:	af e4       	ldi	r26, 0x4F	; 79
     eee:	b3 ec       	ldi	r27, 0xC3	; 195
     ef0:	11 97       	sbiw	r26, 0x01	; 1
     ef2:	f1 f7       	brne	.-4      	; 0xef0 <initialize_values+0x1aa>
     ef4:	00 c0       	rjmp	.+0      	; 0xef6 <initialize_values+0x1b0>
     ef6:	00 00       	nop
	_delay_ms(100);
	//Send initial plate rotation speed
	strcpy(instr, "page0.rotspd.val=");
     ef8:	82 e1       	ldi	r24, 0x12	; 18
     efa:	e9 e9       	ldi	r30, 0x99	; 153
     efc:	f0 e2       	ldi	r31, 0x20	; 32
     efe:	de 01       	movw	r26, r28
     f00:	11 96       	adiw	r26, 0x01	; 1
     f02:	01 90       	ld	r0, Z+
     f04:	0d 92       	st	X+, r0
     f06:	8a 95       	dec	r24
     f08:	e1 f7       	brne	.-8      	; 0xf02 <initialize_values+0x1bc>
	add_int_to_str(initial_rot_spd, &instr_ptr);
     f0a:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <initial_rot_spd>
     f0e:	be 01       	movw	r22, r28
     f10:	6d 5c       	subi	r22, 0xCD	; 205
     f12:	7f 4f       	sbci	r23, 0xFF	; 255
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	0e 94 9f 01 	call	0x33e	; 0x33e <add_int_to_str>
	uart_send_bytes(instr_ptr);
     f1a:	8b a9       	ldd	r24, Y+51	; 0x33
     f1c:	9c a9       	ldd	r25, Y+52	; 0x34
     f1e:	0e 94 99 03 	call	0x732	; 0x732 <uart_send_bytes>
     f22:	8f e4       	ldi	r24, 0x4F	; 79
     f24:	93 ec       	ldi	r25, 0xC3	; 195
     f26:	01 97       	sbiw	r24, 0x01	; 1
     f28:	f1 f7       	brne	.-4      	; 0xf26 <initialize_values+0x1e0>
     f2a:	00 c0       	rjmp	.+0      	; 0xf2c <initialize_values+0x1e6>
     f2c:	00 00       	nop
	_delay_ms(100);
	//Send baketime
	strcpy(instr, "page1.time_min.val=");
     f2e:	84 e1       	ldi	r24, 0x14	; 20
     f30:	eb ea       	ldi	r30, 0xAB	; 171
     f32:	f0 e2       	ldi	r31, 0x20	; 32
     f34:	de 01       	movw	r26, r28
     f36:	11 96       	adiw	r26, 0x01	; 1
     f38:	01 90       	ld	r0, Z+
     f3a:	0d 92       	st	X+, r0
     f3c:	8a 95       	dec	r24
     f3e:	e1 f7       	brne	.-8      	; 0xf38 <initialize_values+0x1f2>
	add_int_to_str(initial_bake_time_m, &instr_ptr);
     f40:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <initial_bake_time_m>
     f44:	be 01       	movw	r22, r28
     f46:	6d 5c       	subi	r22, 0xCD	; 205
     f48:	7f 4f       	sbci	r23, 0xFF	; 255
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	0e 94 9f 01 	call	0x33e	; 0x33e <add_int_to_str>
	uart_send_bytes(instr_ptr);
     f50:	8b a9       	ldd	r24, Y+51	; 0x33
     f52:	9c a9       	ldd	r25, Y+52	; 0x34
     f54:	0e 94 99 03 	call	0x732	; 0x732 <uart_send_bytes>
     f58:	af e4       	ldi	r26, 0x4F	; 79
     f5a:	b3 ec       	ldi	r27, 0xC3	; 195
     f5c:	11 97       	sbiw	r26, 0x01	; 1
     f5e:	f1 f7       	brne	.-4      	; 0xf5c <initialize_values+0x216>
     f60:	00 c0       	rjmp	.+0      	; 0xf62 <initialize_values+0x21c>
     f62:	00 00       	nop
	_delay_ms(100);
	strcpy(instr, "page1.time_sec.val=");
     f64:	84 e1       	ldi	r24, 0x14	; 20
     f66:	ef eb       	ldi	r30, 0xBF	; 191
     f68:	f0 e2       	ldi	r31, 0x20	; 32
     f6a:	de 01       	movw	r26, r28
     f6c:	11 96       	adiw	r26, 0x01	; 1
     f6e:	01 90       	ld	r0, Z+
     f70:	0d 92       	st	X+, r0
     f72:	8a 95       	dec	r24
     f74:	e1 f7       	brne	.-8      	; 0xf6e <initialize_values+0x228>
	add_int_to_str(initial_bake_time_s, &instr_ptr);
     f76:	80 91 2d 21 	lds	r24, 0x212D	; 0x80212d <initial_bake_time_s>
     f7a:	be 01       	movw	r22, r28
     f7c:	6d 5c       	subi	r22, 0xCD	; 205
     f7e:	7f 4f       	sbci	r23, 0xFF	; 255
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	0e 94 9f 01 	call	0x33e	; 0x33e <add_int_to_str>
	uart_send_bytes(instr_ptr);
     f86:	8b a9       	ldd	r24, Y+51	; 0x33
     f88:	9c a9       	ldd	r25, Y+52	; 0x34
     f8a:	0e 94 99 03 	call	0x732	; 0x732 <uart_send_bytes>
     f8e:	8f e4       	ldi	r24, 0x4F	; 79
     f90:	93 ec       	ldi	r25, 0xC3	; 195
     f92:	01 97       	sbiw	r24, 0x01	; 1
     f94:	f1 f7       	brne	.-4      	; 0xf92 <initialize_values+0x24c>
     f96:	00 c0       	rjmp	.+0      	; 0xf98 <initialize_values+0x252>
     f98:	00 00       	nop
	_delay_ms(100);
	//Send sound value
	strcpy(instr, "page1.snd.val=");
     f9a:	8f e0       	ldi	r24, 0x0F	; 15
     f9c:	e3 ed       	ldi	r30, 0xD3	; 211
     f9e:	f0 e2       	ldi	r31, 0x20	; 32
     fa0:	de 01       	movw	r26, r28
     fa2:	11 96       	adiw	r26, 0x01	; 1
     fa4:	01 90       	ld	r0, Z+
     fa6:	0d 92       	st	X+, r0
     fa8:	8a 95       	dec	r24
     faa:	e1 f7       	brne	.-8      	; 0xfa4 <initialize_values+0x25e>
	add_int_to_str(initial_buzzer_on, &instr_ptr);
     fac:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
     fb0:	be 01       	movw	r22, r28
     fb2:	6d 5c       	subi	r22, 0xCD	; 205
     fb4:	7f 4f       	sbci	r23, 0xFF	; 255
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	0e 94 9f 01 	call	0x33e	; 0x33e <add_int_to_str>
	uart_send_bytes(instr_ptr);
     fbc:	8b a9       	ldd	r24, Y+51	; 0x33
     fbe:	9c a9       	ldd	r25, Y+52	; 0x34
     fc0:	0e 94 99 03 	call	0x732	; 0x732 <uart_send_bytes>
     fc4:	af e4       	ldi	r26, 0x4F	; 79
     fc6:	b3 ec       	ldi	r27, 0xC3	; 195
     fc8:	11 97       	sbiw	r26, 0x01	; 1
     fca:	f1 f7       	brne	.-4      	; 0xfc8 <initialize_values+0x282>
     fcc:	00 c0       	rjmp	.+0      	; 0xfce <initialize_values+0x288>
     fce:	00 00       	nop
	_delay_ms(100);
	
	//Set ref values
	//Setting temp ref values
	temp_dome.setpoint = initial_temp_d;
     fd0:	80 91 03 20 	lds	r24, 0x2003	; 0x802003 <initial_temp_d>
     fd4:	90 91 04 20 	lds	r25, 0x2004	; 0x802004 <initial_temp_d+0x1>
     fd8:	80 93 70 21 	sts	0x2170, r24	; 0x802170 <temp_dome>
     fdc:	90 93 71 21 	sts	0x2171, r25	; 0x802171 <temp_dome+0x1>
	temp_plate.setpoint = initial_temp_p;
     fe0:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <initial_temp_p>
     fe4:	90 91 06 20 	lds	r25, 0x2006	; 0x802006 <initial_temp_p+0x1>
     fe8:	80 93 c6 21 	sts	0x21C6, r24	; 0x8021c6 <temp_plate>
     fec:	90 93 c7 21 	sts	0x21C7, r25	; 0x8021c7 <temp_plate+0x1>
	set_temp_swellpoints('d');
     ff0:	84 e6       	ldi	r24, 0x64	; 100
     ff2:	0e 94 20 02 	call	0x440	; 0x440 <set_temp_swellpoints>
	set_temp_swellpoints('p');
     ff6:	80 e7       	ldi	r24, 0x70	; 112
     ff8:	0e 94 20 02 	call	0x440	; 0x440 <set_temp_swellpoints>
	//Setting rotation speed ref value
	plate_speed = initial_rot_spd;
     ffc:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <initial_rot_spd>
    1000:	80 93 57 21 	sts	0x2157, r24	; 0x802157 <plate_speed>
	//setting bake time
	bake_time.minutes = initial_bake_time_m;
    1004:	ef e5       	ldi	r30, 0x5F	; 95
    1006:	f1 e2       	ldi	r31, 0x21	; 33
    1008:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <initial_bake_time_m>
    100c:	80 83       	st	Z, r24
	bake_time.seconds = initial_bake_time_s;
    100e:	80 91 2d 21 	lds	r24, 0x212D	; 0x80212d <initial_bake_time_s>
    1012:	81 83       	std	Z+1, r24	; 0x01
	//Set buzzer
	if(initial_buzzer_on == 1){
    1014:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    1018:	81 30       	cpi	r24, 0x01	; 1
    101a:	19 f4       	brne	.+6      	; 0x1022 <initialize_values+0x2dc>
		buzzer_on = true;
    101c:	80 93 08 20 	sts	0x2008, r24	; 0x802008 <buzzer_on>
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <initialize_values+0x2e0>
	}
	else{
		buzzer_on = false;
    1022:	10 92 08 20 	sts	0x2008, r1	; 0x802008 <buzzer_on>
	}
	//Stop initialization
	uart_send_bytes("page2.init.val=1");
    1026:	82 ee       	ldi	r24, 0xE2	; 226
    1028:	90 e2       	ldi	r25, 0x20	; 32
    102a:	0e 94 99 03 	call	0x732	; 0x732 <uart_send_bytes>
}
    102e:	e4 96       	adiw	r28, 0x34	; 52
    1030:	cd bf       	out	0x3d, r28	; 61
    1032:	de bf       	out	0x3e, r29	; 62
    1034:	df 91       	pop	r29
    1036:	cf 91       	pop	r28
    1038:	1f 91       	pop	r17
    103a:	0f 91       	pop	r16
    103c:	ff 90       	pop	r15
    103e:	08 95       	ret

00001040 <main>:
    1040:	2f ef       	ldi	r18, 0xFF	; 255
    1042:	84 e3       	ldi	r24, 0x34	; 52
    1044:	9c e0       	ldi	r25, 0x0C	; 12
    1046:	21 50       	subi	r18, 0x01	; 1
    1048:	80 40       	sbci	r24, 0x00	; 0
    104a:	90 40       	sbci	r25, 0x00	; 0
    104c:	e1 f7       	brne	.-8      	; 0x1046 <main+0x6>
    104e:	00 c0       	rjmp	.+0      	; 0x1050 <main+0x10>
    1050:	00 00       	nop
{
	//Wait for Nextion to startup
	_delay_ms(2000);
	
	//Set Buzzer as output on PC7
	PORTC.DIR |= PIN7_bm;
    1052:	e0 e4       	ldi	r30, 0x40	; 64
    1054:	f6 e0       	ldi	r31, 0x06	; 6
    1056:	80 81       	ld	r24, Z
    1058:	80 68       	ori	r24, 0x80	; 128
    105a:	80 83       	st	Z, r24
	
	//Define Heating elements as output on PC5 (Plate) and PC6 (Dome)
	PORTC.DIR |= PIN6_bm;
    105c:	80 81       	ld	r24, Z
    105e:	80 64       	ori	r24, 0x40	; 64
    1060:	80 83       	st	Z, r24
	PORTC.DIR |= PIN5_bm;
    1062:	80 81       	ld	r24, Z
    1064:	80 62       	ori	r24, 0x20	; 32
    1066:	80 83       	st	Z, r24
	
	//Set LAMP as output on PORTR PIN0
	PORTR.DIR |= PIN0_bm;
    1068:	e0 ee       	ldi	r30, 0xE0	; 224
    106a:	f7 e0       	ldi	r31, 0x07	; 7
    106c:	80 81       	ld	r24, Z
    106e:	81 60       	ori	r24, 0x01	; 1
    1070:	80 83       	st	Z, r24
	
	//Set Door switch as input on PORTA PIN2 with pull up resistor
	PORTA.DIRCLR = PIN2_bm;
    1072:	e0 e0       	ldi	r30, 0x00	; 0
    1074:	f6 e0       	ldi	r31, 0x06	; 6
    1076:	84 e0       	ldi	r24, 0x04	; 4
    1078:	82 83       	std	Z+2, r24	; 0x02
	PORTA.PIN2CTRL = PORT_OPC_PULLUP_gc; 
    107a:	88 e1       	ldi	r24, 0x18	; 24
    107c:	82 8b       	std	Z+18, r24	; 0x12
	
	//Set Fan as output
	//PORTA.DIR |= PIN0_bm;
	PORTA.DIR |= PIN1_bm;
    107e:	80 81       	ld	r24, Z
    1080:	82 60       	ori	r24, 0x02	; 2
    1082:	80 83       	st	Z, r24
	
	//Set VSD For and Rev as Output
	PORTE.DIR |= PIN2_bm;
    1084:	a0 e8       	ldi	r26, 0x80	; 128
    1086:	b6 e0       	ldi	r27, 0x06	; 6
    1088:	8c 91       	ld	r24, X
    108a:	84 60       	ori	r24, 0x04	; 4
    108c:	8c 93       	st	X, r24
	PORTE.DIR |= PIN3_bm;
    108e:	8c 91       	ld	r24, X
    1090:	88 60       	ori	r24, 0x08	; 8
    1092:	8c 93       	st	X, r24
	
	//Set Main Cont as output
	PORTA.DIR |= PIN0_bm;
    1094:	80 81       	ld	r24, Z
    1096:	81 60       	ori	r24, 0x01	; 1
    1098:	80 83       	st	Z, r24
	
	//Initialize UARTSS
	init_uart(BAUD);
    109a:	60 e8       	ldi	r22, 0x80	; 128
    109c:	75 e2       	ldi	r23, 0x25	; 37
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <init_uart>
	
	//Initialize Timers
	init_timer0();
    10a6:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <init_timer0>
	init_timer1();
    10aa:	0e 94 ee 02 	call	0x5dc	; 0x5dc <init_timer1>
	
	//Initialize ADC 
	init_ADC();
    10ae:	0e 94 4d 02 	call	0x49a	; 0x49a <init_ADC>
	
	//Initialize DAC
	init_DAC();
    10b2:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <init_DAC>
	
	// Enable PMIC interrupt level low
	PMIC.CTRL |= PMIC_LOLVLEX_bm;
    10b6:	e0 ea       	ldi	r30, 0xA0	; 160
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	82 81       	ldd	r24, Z+2	; 0x02
    10bc:	81 60       	ori	r24, 0x01	; 1
    10be:	82 83       	std	Z+2, r24	; 0x02
	
	// Enable global interrupts.
	sei();
    10c0:	78 94       	sei
	
	//start ADC
	start_ADC();
    10c2:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <start_ADC>
	
	EEPROM_DisableMapping();
    10c6:	e0 ec       	ldi	r30, 0xC0	; 192
    10c8:	f1 e0       	ldi	r31, 0x01	; 1
    10ca:	84 85       	ldd	r24, Z+12	; 0x0c
    10cc:	87 7f       	andi	r24, 0xF7	; 247
    10ce:	84 87       	std	Z+12, r24	; 0x0c
	
	if(reset_EEPROM == true){
    10d0:	80 91 2c 21 	lds	r24, 0x212C	; 0x80212c <reset_EEPROM>
    10d4:	81 11       	cpse	r24, r1
		//reset the values within the EEPROM 
		reset_EEPROM_values();
    10d6:	0e 94 73 05 	call	0xae6	; 0xae6 <reset_EEPROM_values>
    10da:	2f e7       	ldi	r18, 0x7F	; 127
    10dc:	88 e3       	ldi	r24, 0x38	; 56
    10de:	91 e0       	ldi	r25, 0x01	; 1
    10e0:	21 50       	subi	r18, 0x01	; 1
    10e2:	80 40       	sbci	r24, 0x00	; 0
    10e4:	90 40       	sbci	r25, 0x00	; 0
    10e6:	e1 f7       	brne	.-8      	; 0x10e0 <main+0xa0>
    10e8:	00 c0       	rjmp	.+0      	; 0x10ea <main+0xaa>
    10ea:	00 00       	nop
	}
	
	//delay
	_delay_ms(200);
	//initialize oven values - dome temp, plate temp and rotation speed
	initialize_values();
    10ec:	0e 94 a3 06 	call	0xd46	; 0xd46 <initialize_values>
	
	//set tick value for heating elements
	heating_error_ticks = tick_current;
    10f0:	80 91 43 21 	lds	r24, 0x2143	; 0x802143 <tick_current>
    10f4:	90 91 44 21 	lds	r25, 0x2144	; 0x802144 <tick_current+0x1>
    10f8:	a0 91 45 21 	lds	r26, 0x2145	; 0x802145 <tick_current+0x2>
    10fc:	b0 91 46 21 	lds	r27, 0x2146	; 0x802146 <tick_current+0x3>
    1100:	80 93 30 21 	sts	0x2130, r24	; 0x802130 <heating_error_ticks>
    1104:	90 93 31 21 	sts	0x2131, r25	; 0x802131 <heating_error_ticks+0x1>
    1108:	a0 93 32 21 	sts	0x2132, r26	; 0x802132 <heating_error_ticks+0x2>
    110c:	b0 93 33 21 	sts	0x2133, r27	; 0x802133 <heating_error_ticks+0x3>
	
	//Main loop
	while(1){
		//Run Fan
		run_fan();
    1110:	0e 94 14 02 	call	0x428	; 0x428 <run_fan>
		
		//check heating element state after 20min
		check_heating_elements();
    1114:	0e 94 63 04 	call	0x8c6	; 0x8c6 <check_heating_elements>
		
		//Set Main Contact On or off
		if(main_contact_on ==true){
    1118:	80 91 3a 21 	lds	r24, 0x213A	; 0x80213a <main_contact_on>
    111c:	88 23       	and	r24, r24
    111e:	21 f0       	breq	.+8      	; 0x1128 <main+0xe8>
			MAIN_CONT_ON;
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7de605>
    1126:	03 c0       	rjmp	.+6      	; 0x112e <main+0xee>
		}
		else{
			MAIN_CONT_OFF;
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7de606>
		}
		
		//Read the UART string send from the Nextion
		if(rx_received == true)
    112e:	80 91 5e 21 	lds	r24, 0x215E	; 0x80215e <rx_received>
    1132:	88 23       	and	r24, r24
    1134:	51 f0       	breq	.+20     	; 0x114a <main+0x10a>
		{
			//Call UART receiver function if UART receive flag is set
			received = uart_receive_bytes();
    1136:	0e 94 4d 03 	call	0x69a	; 0x69a <uart_receive_bytes>
    113a:	80 93 cc 21 	sts	0x21CC, r24	; 0x8021cc <received>
    113e:	90 93 cd 21 	sts	0x21CD, r25	; 0x8021cd <received+0x1>
			//Send UART data to the receiver handler
			data_received_handler(received);
    1142:	0e 94 ae 05 	call	0xb5c	; 0xb5c <data_received_handler>
			//set UART receive flag to false
			rx_received = false;
    1146:	10 92 5e 21 	sts	0x215E, r1	; 0x80215e <rx_received>
		}
		
		//Once adc fetch flag is set by the timer (after 1 sec) retrieve the adc mean value
		if(fetch_adc == true){
    114a:	80 91 35 21 	lds	r24, 0x2135	; 0x802135 <fetch_adc>
    114e:	88 23       	and	r24, r24
    1150:	09 f4       	brne	.+2      	; 0x1154 <main+0x114>
    1152:	44 c0       	rjmp	.+136    	; 0x11dc <main+0x19c>
			adc_mean = adc_get_mean(adc_buffer_cnt);
    1154:	80 91 38 21 	lds	r24, 0x2138	; 0x802138 <adc_buffer_cnt>
    1158:	0e 94 65 02 	call	0x4ca	; 0x4ca <adc_get_mean>
    115c:	fc 01       	movw	r30, r24
    115e:	80 93 36 21 	sts	0x2136, r24	; 0x802136 <adc_mean>
    1162:	90 93 37 21 	sts	0x2137, r25	; 0x802137 <adc_mean+0x1>
			adc_buffer_cnt++;
    1166:	80 91 38 21 	lds	r24, 0x2138	; 0x802138 <adc_buffer_cnt>
    116a:	90 91 39 21 	lds	r25, 0x2139	; 0x802139 <adc_buffer_cnt+0x1>
    116e:	01 96       	adiw	r24, 0x01	; 1
    1170:	80 93 38 21 	sts	0x2138, r24	; 0x802138 <adc_buffer_cnt>
    1174:	90 93 39 21 	sts	0x2139, r25	; 0x802139 <adc_buffer_cnt+0x1>
			//reset the buffer counter once it reaches the Buffer Size
			if(adc_buffer_cnt == BUFFER_SIZE)
    1178:	44 97       	sbiw	r24, 0x14	; 20
    117a:	21 f4       	brne	.+8      	; 0x1184 <main+0x144>
			{
				adc_buffer_cnt = 0;
    117c:	10 92 38 21 	sts	0x2138, r1	; 0x802138 <adc_buffer_cnt>
    1180:	10 92 39 21 	sts	0x2139, r1	; 0x802139 <adc_buffer_cnt+0x1>
			}
			fetch_adc = false;
    1184:	10 92 35 21 	sts	0x2135, r1	; 0x802135 <fetch_adc>
			//Calculate temperature
			PT100_Dome = adc_mean[0] / VREF;
    1188:	20 81       	ld	r18, Z
    118a:	31 81       	ldd	r19, Z+1	; 0x01
    118c:	ad ec       	ldi	r26, 0xCD	; 205
    118e:	bc ec       	ldi	r27, 0xCC	; 204
    1190:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__umulhisi3>
    1194:	96 95       	lsr	r25
    1196:	87 95       	ror	r24
    1198:	96 95       	lsr	r25
    119a:	87 95       	ror	r24
    119c:	96 95       	lsr	r25
    119e:	87 95       	ror	r24
    11a0:	80 93 5c 21 	sts	0x215C, r24	; 0x80215c <PT100_Dome>
    11a4:	90 93 5d 21 	sts	0x215D, r25	; 0x80215d <PT100_Dome+0x1>
			PT100_Plate = adc_mean[1] / VREF;
    11a8:	22 81       	ldd	r18, Z+2	; 0x02
    11aa:	33 81       	ldd	r19, Z+3	; 0x03
    11ac:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__umulhisi3>
    11b0:	96 95       	lsr	r25
    11b2:	87 95       	ror	r24
    11b4:	96 95       	lsr	r25
    11b6:	87 95       	ror	r24
    11b8:	96 95       	lsr	r25
    11ba:	87 95       	ror	r24
    11bc:	80 93 5a 21 	sts	0x215A, r24	; 0x80215a <PT100_Plate>
    11c0:	90 93 5b 21 	sts	0x215B, r25	; 0x80215b <PT100_Plate+0x1>
			//Send TempP to Nextion
			send_temp(PT100_Plate, "page0.actual_tempP.val=");
    11c4:	63 ef       	ldi	r22, 0xF3	; 243
    11c6:	70 e2       	ldi	r23, 0x20	; 32
    11c8:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <send_temp>
			//Send TempD to Nextion
			send_temp(PT100_Dome, "page0.actual_tempD.val=");
    11cc:	6b e0       	ldi	r22, 0x0B	; 11
    11ce:	71 e2       	ldi	r23, 0x21	; 33
    11d0:	80 91 5c 21 	lds	r24, 0x215C	; 0x80215c <PT100_Dome>
    11d4:	90 91 5d 21 	lds	r25, 0x215D	; 0x80215d <PT100_Dome+0x1>
    11d8:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <send_temp>
		}
		
		//If the timer goes off start oven chime
		if(bake_timeout_flag)
    11dc:	80 91 56 21 	lds	r24, 0x2156	; 0x802156 <bake_timeout_flag>
    11e0:	88 23       	and	r24, r24
    11e2:	39 f0       	breq	.+14     	; 0x11f2 <main+0x1b2>
		{
			//Turn buzzer sound ON
			baketime_finished();
    11e4:	0e 94 e5 01 	call	0x3ca	; 0x3ca <baketime_finished>
			repeat_chime = true;
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	80 93 55 21 	sts	0x2155, r24	; 0x802155 <repeat_chime>
			bake_timeout_flag = false;
    11ee:	10 92 56 21 	sts	0x2156, r1	; 0x802156 <bake_timeout_flag>
			
		}
		
		//If Preheat is finished set off chime
		if(preheat_chime)
    11f2:	80 91 50 21 	lds	r24, 0x2150	; 0x802150 <preheat_chime>
    11f6:	88 23       	and	r24, r24
    11f8:	21 f0       	breq	.+8      	; 0x1202 <main+0x1c2>
		{
			preheat_finished();
    11fa:	0e 94 c4 01 	call	0x388	; 0x388 <preheat_finished>
			preheat_chime = false;
    11fe:	10 92 50 21 	sts	0x2150, r1	; 0x802150 <preheat_chime>
		}
		
		//Check if door was opened
		check_door_state();
    1202:	0e 94 0c 04 	call	0x818	; 0x818 <check_door_state>
		
		//Check if start was enabled
		check_bake_state();
    1206:	0e 94 ae 04 	call	0x95c	; 0x95c <check_bake_state>
		
		//heat the oven
		heating_oven();
    120a:	0e 94 44 01 	call	0x288	; 0x288 <heating_oven>
		
	}
    120e:	80 cf       	rjmp	.-256    	; 0x1110 <main+0xd0>

00001210 <__vector_88>:
 *  Receive complete interrupt service routine.
 *  Calls the common receive complete handler with pointer to the correct USART
 *  as argument.
 */
ISR(USARTD0_RXC_vect)
{
    1210:	1f 92       	push	r1
    1212:	0f 92       	push	r0
    1214:	0f b6       	in	r0, 0x3f	; 63
    1216:	0f 92       	push	r0
    1218:	11 24       	eor	r1, r1
    121a:	08 b6       	in	r0, 0x38	; 56
    121c:	0f 92       	push	r0
    121e:	18 be       	out	0x38, r1	; 56
    1220:	09 b6       	in	r0, 0x39	; 57
    1222:	0f 92       	push	r0
    1224:	19 be       	out	0x39, r1	; 57
    1226:	0b b6       	in	r0, 0x3b	; 59
    1228:	0f 92       	push	r0
    122a:	1b be       	out	0x3b, r1	; 59
    122c:	2f 93       	push	r18
    122e:	3f 93       	push	r19
    1230:	4f 93       	push	r20
    1232:	5f 93       	push	r21
    1234:	6f 93       	push	r22
    1236:	7f 93       	push	r23
    1238:	8f 93       	push	r24
    123a:	9f 93       	push	r25
    123c:	af 93       	push	r26
    123e:	bf 93       	push	r27
    1240:	ef 93       	push	r30
    1242:	ff 93       	push	r31
	if(USART_RXComplete(&USART_data)){
    1244:	81 e6       	ldi	r24, 0x61	; 97
    1246:	91 e2       	ldi	r25, 0x21	; 33
    1248:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <USART_RXComplete>
    124c:	88 23       	and	r24, r24
    124e:	19 f0       	breq	.+6      	; 0x1256 <__vector_88+0x46>
		rx_received = true;
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	80 93 5e 21 	sts	0x215E, r24	; 0x80215e <rx_received>
	};
	
}
    1256:	ff 91       	pop	r31
    1258:	ef 91       	pop	r30
    125a:	bf 91       	pop	r27
    125c:	af 91       	pop	r26
    125e:	9f 91       	pop	r25
    1260:	8f 91       	pop	r24
    1262:	7f 91       	pop	r23
    1264:	6f 91       	pop	r22
    1266:	5f 91       	pop	r21
    1268:	4f 91       	pop	r20
    126a:	3f 91       	pop	r19
    126c:	2f 91       	pop	r18
    126e:	0f 90       	pop	r0
    1270:	0b be       	out	0x3b, r0	; 59
    1272:	0f 90       	pop	r0
    1274:	09 be       	out	0x39, r0	; 57
    1276:	0f 90       	pop	r0
    1278:	08 be       	out	0x38, r0	; 56
    127a:	0f 90       	pop	r0
    127c:	0f be       	out	0x3f, r0	; 63
    127e:	0f 90       	pop	r0
    1280:	1f 90       	pop	r1
    1282:	18 95       	reti

00001284 <__vector_89>:
 *  Data register empty  interrupt service routine.
 *  Calls the common data register empty complete handler with pointer to the
 *  correct USART as argument.
 */
ISR(USARTD0_DRE_vect)
{
    1284:	1f 92       	push	r1
    1286:	0f 92       	push	r0
    1288:	0f b6       	in	r0, 0x3f	; 63
    128a:	0f 92       	push	r0
    128c:	11 24       	eor	r1, r1
    128e:	08 b6       	in	r0, 0x38	; 56
    1290:	0f 92       	push	r0
    1292:	18 be       	out	0x38, r1	; 56
    1294:	09 b6       	in	r0, 0x39	; 57
    1296:	0f 92       	push	r0
    1298:	19 be       	out	0x39, r1	; 57
    129a:	0b b6       	in	r0, 0x3b	; 59
    129c:	0f 92       	push	r0
    129e:	1b be       	out	0x3b, r1	; 59
    12a0:	2f 93       	push	r18
    12a2:	3f 93       	push	r19
    12a4:	4f 93       	push	r20
    12a6:	5f 93       	push	r21
    12a8:	6f 93       	push	r22
    12aa:	7f 93       	push	r23
    12ac:	8f 93       	push	r24
    12ae:	9f 93       	push	r25
    12b0:	af 93       	push	r26
    12b2:	bf 93       	push	r27
    12b4:	ef 93       	push	r30
    12b6:	ff 93       	push	r31
	USART_DataRegEmpty(&USART_data);
    12b8:	81 e6       	ldi	r24, 0x61	; 97
    12ba:	91 e2       	ldi	r25, 0x21	; 33
    12bc:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <USART_DataRegEmpty>
}
    12c0:	ff 91       	pop	r31
    12c2:	ef 91       	pop	r30
    12c4:	bf 91       	pop	r27
    12c6:	af 91       	pop	r26
    12c8:	9f 91       	pop	r25
    12ca:	8f 91       	pop	r24
    12cc:	7f 91       	pop	r23
    12ce:	6f 91       	pop	r22
    12d0:	5f 91       	pop	r21
    12d2:	4f 91       	pop	r20
    12d4:	3f 91       	pop	r19
    12d6:	2f 91       	pop	r18
    12d8:	0f 90       	pop	r0
    12da:	0b be       	out	0x3b, r0	; 59
    12dc:	0f 90       	pop	r0
    12de:	09 be       	out	0x39, r0	; 57
    12e0:	0f 90       	pop	r0
    12e2:	08 be       	out	0x38, r0	; 56
    12e4:	0f 90       	pop	r0
    12e6:	0f be       	out	0x3f, r0	; 63
    12e8:	0f 90       	pop	r0
    12ea:	1f 90       	pop	r1
    12ec:	18 95       	reti

000012ee <__vector_14>:

//Timer0 Overflow interrupt service routine
ISR(TCC0_OVF_vect)
{
    12ee:	1f 92       	push	r1
    12f0:	0f 92       	push	r0
    12f2:	0f b6       	in	r0, 0x3f	; 63
    12f4:	0f 92       	push	r0
    12f6:	11 24       	eor	r1, r1
    12f8:	08 b6       	in	r0, 0x38	; 56
    12fa:	0f 92       	push	r0
    12fc:	18 be       	out	0x38, r1	; 56
    12fe:	09 b6       	in	r0, 0x39	; 57
    1300:	0f 92       	push	r0
    1302:	19 be       	out	0x39, r1	; 57
    1304:	8f 93       	push	r24
    1306:	9f 93       	push	r25
    1308:	af 93       	push	r26
    130a:	bf 93       	push	r27
	//Timer interrupt called every 10msec
	tick_current += 1;
    130c:	80 91 43 21 	lds	r24, 0x2143	; 0x802143 <tick_current>
    1310:	90 91 44 21 	lds	r25, 0x2144	; 0x802144 <tick_current+0x1>
    1314:	a0 91 45 21 	lds	r26, 0x2145	; 0x802145 <tick_current+0x2>
    1318:	b0 91 46 21 	lds	r27, 0x2146	; 0x802146 <tick_current+0x3>
    131c:	01 96       	adiw	r24, 0x01	; 1
    131e:	a1 1d       	adc	r26, r1
    1320:	b1 1d       	adc	r27, r1
    1322:	80 93 43 21 	sts	0x2143, r24	; 0x802143 <tick_current>
    1326:	90 93 44 21 	sts	0x2144, r25	; 0x802144 <tick_current+0x1>
    132a:	a0 93 45 21 	sts	0x2145, r26	; 0x802145 <tick_current+0x2>
    132e:	b0 93 46 21 	sts	0x2146, r27	; 0x802146 <tick_current+0x3>
	adc_tick_count += 1;
    1332:	80 91 3f 21 	lds	r24, 0x213F	; 0x80213f <adc_tick_count>
    1336:	90 91 40 21 	lds	r25, 0x2140	; 0x802140 <adc_tick_count+0x1>
    133a:	a0 91 41 21 	lds	r26, 0x2141	; 0x802141 <adc_tick_count+0x2>
    133e:	b0 91 42 21 	lds	r27, 0x2142	; 0x802142 <adc_tick_count+0x3>
    1342:	01 96       	adiw	r24, 0x01	; 1
    1344:	a1 1d       	adc	r26, r1
    1346:	b1 1d       	adc	r27, r1
    1348:	80 93 3f 21 	sts	0x213F, r24	; 0x80213f <adc_tick_count>
    134c:	90 93 40 21 	sts	0x2140, r25	; 0x802140 <adc_tick_count+0x1>
    1350:	a0 93 41 21 	sts	0x2141, r26	; 0x802141 <adc_tick_count+0x2>
    1354:	b0 93 42 21 	sts	0x2142, r27	; 0x802142 <adc_tick_count+0x3>
	
	if(adc_tick_count >= 100){
    1358:	84 36       	cpi	r24, 0x64	; 100
    135a:	91 05       	cpc	r25, r1
    135c:	a1 05       	cpc	r26, r1
    135e:	b1 05       	cpc	r27, r1
    1360:	58 f0       	brcs	.+22     	; 0x1378 <__vector_14+0x8a>
		//After 1sec fetch ADC value
		fetch_adc = true;
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	80 93 35 21 	sts	0x2135, r24	; 0x802135 <fetch_adc>
		adc_tick_count  = 0;
    1368:	10 92 3f 21 	sts	0x213F, r1	; 0x80213f <adc_tick_count>
    136c:	10 92 40 21 	sts	0x2140, r1	; 0x802140 <adc_tick_count+0x1>
    1370:	10 92 41 21 	sts	0x2141, r1	; 0x802141 <adc_tick_count+0x2>
    1374:	10 92 42 21 	sts	0x2142, r1	; 0x802142 <adc_tick_count+0x3>
	}
}
    1378:	bf 91       	pop	r27
    137a:	af 91       	pop	r26
    137c:	9f 91       	pop	r25
    137e:	8f 91       	pop	r24
    1380:	0f 90       	pop	r0
    1382:	09 be       	out	0x39, r0	; 57
    1384:	0f 90       	pop	r0
    1386:	08 be       	out	0x38, r0	; 56
    1388:	0f 90       	pop	r0
    138a:	0f be       	out	0x3f, r0	; 63
    138c:	0f 90       	pop	r0
    138e:	1f 90       	pop	r1
    1390:	18 95       	reti

00001392 <__vector_20>:

//Timer1 Overflow interrupt service routine
ISR(TCC1_OVF_vect)
{
    1392:	1f 92       	push	r1
    1394:	0f 92       	push	r0
    1396:	0f b6       	in	r0, 0x3f	; 63
    1398:	0f 92       	push	r0
    139a:	11 24       	eor	r1, r1
    139c:	08 b6       	in	r0, 0x38	; 56
    139e:	0f 92       	push	r0
    13a0:	18 be       	out	0x38, r1	; 56
    13a2:	09 b6       	in	r0, 0x39	; 57
    13a4:	0f 92       	push	r0
    13a6:	19 be       	out	0x39, r1	; 57
    13a8:	2f 93       	push	r18
    13aa:	8f 93       	push	r24
    13ac:	9f 93       	push	r25
    13ae:	af 93       	push	r26
    13b0:	bf 93       	push	r27
	//Timer interrupt called every 200msec
	//This timer is used to check the heating elements after 20min and to call the timeout chime every 30 sec
	element_ticks += 1;
    13b2:	80 91 3b 21 	lds	r24, 0x213B	; 0x80213b <element_ticks>
    13b6:	90 91 3c 21 	lds	r25, 0x213C	; 0x80213c <element_ticks+0x1>
    13ba:	a0 91 3d 21 	lds	r26, 0x213D	; 0x80213d <element_ticks+0x2>
    13be:	b0 91 3e 21 	lds	r27, 0x213E	; 0x80213e <element_ticks+0x3>
    13c2:	01 96       	adiw	r24, 0x01	; 1
    13c4:	a1 1d       	adc	r26, r1
    13c6:	b1 1d       	adc	r27, r1
    13c8:	80 93 3b 21 	sts	0x213B, r24	; 0x80213b <element_ticks>
    13cc:	90 93 3c 21 	sts	0x213C, r25	; 0x80213c <element_ticks+0x1>
    13d0:	a0 93 3d 21 	sts	0x213D, r26	; 0x80213d <element_ticks+0x2>
    13d4:	b0 93 3e 21 	sts	0x213E, r27	; 0x80213e <element_ticks+0x3>
	
	if(element_ticks >= 6000){
    13d8:	80 37       	cpi	r24, 0x70	; 112
    13da:	97 41       	sbci	r25, 0x17	; 23
    13dc:	a1 05       	cpc	r26, r1
    13de:	b1 05       	cpc	r27, r1
    13e0:	38 f0       	brcs	.+14     	; 0x13f0 <__vector_20+0x5e>
		//After 20 minutes check that the heating elements are working
		if(elements_work == false){
    13e2:	80 91 2f 21 	lds	r24, 0x212F	; 0x80212f <elements_work>
    13e6:	81 11       	cpse	r24, r1
    13e8:	03 c0       	rjmp	.+6      	; 0x13f0 <__vector_20+0x5e>
			send_error = true;
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	80 93 2e 21 	sts	0x212E, r24	; 0x80212e <send_error>
		}
	}
	
	if(repeat_chime == true){
    13f0:	80 91 55 21 	lds	r24, 0x2155	; 0x802155 <repeat_chime>
    13f4:	88 23       	and	r24, r24
    13f6:	f1 f0       	breq	.+60     	; 0x1434 <__vector_20+0xa2>
		tick_chime += 1;
    13f8:	80 91 51 21 	lds	r24, 0x2151	; 0x802151 <tick_chime>
    13fc:	90 91 52 21 	lds	r25, 0x2152	; 0x802152 <tick_chime+0x1>
    1400:	a0 91 53 21 	lds	r26, 0x2153	; 0x802153 <tick_chime+0x2>
    1404:	b0 91 54 21 	lds	r27, 0x2154	; 0x802154 <tick_chime+0x3>
    1408:	01 96       	adiw	r24, 0x01	; 1
    140a:	a1 1d       	adc	r26, r1
    140c:	b1 1d       	adc	r27, r1
    140e:	80 93 51 21 	sts	0x2151, r24	; 0x802151 <tick_chime>
    1412:	90 93 52 21 	sts	0x2152, r25	; 0x802152 <tick_chime+0x1>
    1416:	a0 93 53 21 	sts	0x2153, r26	; 0x802153 <tick_chime+0x2>
    141a:	b0 93 54 21 	sts	0x2154, r27	; 0x802154 <tick_chime+0x3>
		if(tick_chime >= 150)
    141e:	86 39       	cpi	r24, 0x96	; 150
    1420:	91 05       	cpc	r25, r1
    1422:	a1 05       	cpc	r26, r1
    1424:	b1 05       	cpc	r27, r1
    1426:	70 f0       	brcs	.+28     	; 0x1444 <__vector_20+0xb2>
		{
			bake_timeout_flag = true;
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	80 93 56 21 	sts	0x2156, r24	; 0x802156 <bake_timeout_flag>
			repeat_chime =  false;
    142e:	10 92 55 21 	sts	0x2155, r1	; 0x802155 <repeat_chime>
    1432:	08 c0       	rjmp	.+16     	; 0x1444 <__vector_20+0xb2>
		}
		
	}
	else
	{
		tick_chime = 0;
    1434:	10 92 51 21 	sts	0x2151, r1	; 0x802151 <tick_chime>
    1438:	10 92 52 21 	sts	0x2152, r1	; 0x802152 <tick_chime+0x1>
    143c:	10 92 53 21 	sts	0x2153, r1	; 0x802153 <tick_chime+0x2>
    1440:	10 92 54 21 	sts	0x2154, r1	; 0x802154 <tick_chime+0x3>
	}
	
}
    1444:	bf 91       	pop	r27
    1446:	af 91       	pop	r26
    1448:	9f 91       	pop	r25
    144a:	8f 91       	pop	r24
    144c:	2f 91       	pop	r18
    144e:	0f 90       	pop	r0
    1450:	09 be       	out	0x39, r0	; 57
    1452:	0f 90       	pop	r0
    1454:	08 be       	out	0x38, r0	; 56
    1456:	0f 90       	pop	r0
    1458:	0f be       	out	0x3f, r0	; 63
    145a:	0f 90       	pop	r0
    145c:	1f 90       	pop	r1
    145e:	18 95       	reti

00001460 <EEPROM_WaitForNVM>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    1460:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7de1cf>
    1464:	88 23       	and	r24, r24
    1466:	e4 f3       	brlt	.-8      	; 0x1460 <EEPROM_WaitForNVM>
}
    1468:	08 95       	ret

0000146a <EEPROM_ReadByte>:
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *
 *  \return  Byte value read from EEPROM.
 */
uint16_t EEPROM_ReadByte( uint8_t pageAddr, uint8_t byteAddr )
{
    146a:	cf 93       	push	r28
    146c:	df 93       	push	r29
    146e:	c8 2f       	mov	r28, r24
    1470:	d6 2f       	mov	r29, r22
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    1472:	0e 94 30 0a 	call	0x1460	; 0x1460 <EEPROM_WaitForNVM>

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
    1476:	20 e2       	ldi	r18, 0x20	; 32
    1478:	c2 9f       	mul	r28, r18
    147a:	c0 01       	movw	r24, r0
    147c:	11 24       	eor	r1, r1
	                            |(byteAddr & (EEPROM_PAGESIZE-1));
    147e:	df 71       	andi	r29, 0x1F	; 31
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
    1480:	8d 2b       	or	r24, r29
	                            |(byteAddr & (EEPROM_PAGESIZE-1));

	/* Set address to read from. */
	NVM.ADDR0 = address & 0xFF;
    1482:	e0 ec       	ldi	r30, 0xC0	; 192
    1484:	f1 e0       	ldi	r31, 0x01	; 1
    1486:	80 83       	st	Z, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    1488:	89 2f       	mov	r24, r25
    148a:	8f 71       	andi	r24, 0x1F	; 31
    148c:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    148e:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Read command. */
	NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    1490:	86 e0       	ldi	r24, 0x06	; 6
    1492:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    1494:	ef 93       	push	r30
    1496:	ff 93       	push	r31
    1498:	0f 93       	push	r16
    149a:	2f 93       	push	r18
    149c:	eb ec       	ldi	r30, 0xCB	; 203
    149e:	f1 e0       	ldi	r31, 0x01	; 1
    14a0:	08 ed       	ldi	r16, 0xD8	; 216
    14a2:	21 e0       	ldi	r18, 0x01	; 1
    14a4:	04 bf       	out	0x34, r16	; 52
    14a6:	20 83       	st	Z, r18
    14a8:	2f 91       	pop	r18
    14aa:	0f 91       	pop	r16
    14ac:	ff 91       	pop	r31
    14ae:	ef 91       	pop	r30

	return NVM.DATA0;
    14b0:	84 81       	ldd	r24, Z+4	; 0x04
}
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	df 91       	pop	r29
    14b6:	cf 91       	pop	r28
    14b8:	08 95       	ret

000014ba <EEPROM_FlushBuffer>:
 *  \note The EEPROM write operations will automatically flush the buffer for you.
 */
void EEPROM_FlushBuffer( void )
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    14ba:	0e 94 30 0a 	call	0x1460	; 0x1460 <EEPROM_WaitForNVM>

	/* Flush EEPROM page buffer if necessary. */
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    14be:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7de1cf>
    14c2:	81 ff       	sbrs	r24, 1
    14c4:	11 c0       	rjmp	.+34     	; 0x14e8 <EEPROM_FlushBuffer+0x2e>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    14c6:	86 e3       	ldi	r24, 0x36	; 54
    14c8:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7de1ca>
		NVM_EXEC();
    14cc:	ef 93       	push	r30
    14ce:	ff 93       	push	r31
    14d0:	0f 93       	push	r16
    14d2:	2f 93       	push	r18
    14d4:	eb ec       	ldi	r30, 0xCB	; 203
    14d6:	f1 e0       	ldi	r31, 0x01	; 1
    14d8:	08 ed       	ldi	r16, 0xD8	; 216
    14da:	21 e0       	ldi	r18, 0x01	; 1
    14dc:	04 bf       	out	0x34, r16	; 52
    14de:	20 83       	st	Z, r18
    14e0:	2f 91       	pop	r18
    14e2:	0f 91       	pop	r16
    14e4:	ff 91       	pop	r31
    14e6:	ef 91       	pop	r30
    14e8:	08 95       	ret

000014ea <EEPROM_WriteByte>:
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to EEPROM.
 */
void EEPROM_WriteByte( uint8_t pageAddr, uint8_t byteAddr, uint16_t value )
{
    14ea:	1f 93       	push	r17
    14ec:	cf 93       	push	r28
    14ee:	df 93       	push	r29
    14f0:	c8 2f       	mov	r28, r24
    14f2:	d6 2f       	mov	r29, r22
    14f4:	14 2f       	mov	r17, r20
	/*  Flush buffer to make sure no unintetional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	EEPROM_FlushBuffer();
    14f6:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <EEPROM_FlushBuffer>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    14fa:	e0 ec       	ldi	r30, 0xC0	; 192
    14fc:	f1 e0       	ldi	r31, 0x01	; 1
    14fe:	83 e3       	ldi	r24, 0x33	; 51
    1500:	82 87       	std	Z+10, r24	; 0x0a

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
    1502:	20 e2       	ldi	r18, 0x20	; 32
    1504:	c2 9f       	mul	r28, r18
    1506:	c0 01       	movw	r24, r0
    1508:	11 24       	eor	r1, r1
	                            |(byteAddr & (EEPROM_PAGESIZE-1));
    150a:	df 71       	andi	r29, 0x1F	; 31
	 */
	EEPROM_FlushBuffer();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
    150c:	8d 2b       	or	r24, r29
	                            |(byteAddr & (EEPROM_PAGESIZE-1));

	/* Set address to write to. */
	NVM.ADDR0 = address & 0xFF;
    150e:	80 83       	st	Z, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    1510:	89 2f       	mov	r24, r25
    1512:	8f 71       	andi	r24, 0x1F	; 31
    1514:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    1516:	12 82       	std	Z+2, r1	; 0x02

	/* Load data to write, which triggers the loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    1518:	14 83       	std	Z+4, r17	; 0x04

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    151a:	85 e3       	ldi	r24, 0x35	; 53
    151c:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    151e:	ef 93       	push	r30
    1520:	ff 93       	push	r31
    1522:	0f 93       	push	r16
    1524:	2f 93       	push	r18
    1526:	eb ec       	ldi	r30, 0xCB	; 203
    1528:	f1 e0       	ldi	r31, 0x01	; 1
    152a:	08 ed       	ldi	r16, 0xD8	; 216
    152c:	21 e0       	ldi	r18, 0x01	; 1
    152e:	04 bf       	out	0x34, r16	; 52
    1530:	20 83       	st	Z, r18
    1532:	2f 91       	pop	r18
    1534:	0f 91       	pop	r16
    1536:	ff 91       	pop	r31
    1538:	ef 91       	pop	r30
}
    153a:	df 91       	pop	r29
    153c:	cf 91       	pop	r28
    153e:	1f 91       	pop	r17
    1540:	08 95       	ret

00001542 <USART_InterruptDriver_Initialize>:
		tempCTRLA = usart_data->usart->CTRLA;
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | usart_data->dreIntLevel;
		usart_data->usart->CTRLA = tempCTRLA;
	}
	return TXBuffer_FreeSpace;
}
    1542:	fc 01       	movw	r30, r24
    1544:	60 83       	st	Z, r22
    1546:	71 83       	std	Z+1, r23	; 0x01
    1548:	42 83       	std	Z+2, r20	; 0x02
    154a:	14 86       	std	Z+12, r1	; 0x0c
    154c:	13 86       	std	Z+11, r1	; 0x0b
    154e:	16 86       	std	Z+14, r1	; 0x0e
    1550:	15 86       	std	Z+13, r1	; 0x0d
    1552:	08 95       	ret

00001554 <USART_TXBuffer_FreeSpace>:
    1554:	fc 01       	movw	r30, r24
    1556:	95 85       	ldd	r25, Z+13	; 0x0d
    1558:	9f 5f       	subi	r25, 0xFF	; 255
    155a:	93 70       	andi	r25, 0x03	; 3
    155c:	26 85       	ldd	r18, Z+14	; 0x0e
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	92 13       	cpse	r25, r18
    1562:	01 c0       	rjmp	.+2      	; 0x1566 <USART_TXBuffer_FreeSpace+0x12>
    1564:	80 e0       	ldi	r24, 0x00	; 0
    1566:	08 95       	ret

00001568 <USART_TXBuffer_PutByte>:
    1568:	1f 93       	push	r17
    156a:	cf 93       	push	r28
    156c:	df 93       	push	r29
    156e:	ec 01       	movw	r28, r24
    1570:	16 2f       	mov	r17, r22
    1572:	0e 94 aa 0a 	call	0x1554	; 0x1554 <USART_TXBuffer_FreeSpace>
    1576:	88 23       	and	r24, r24
    1578:	79 f0       	breq	.+30     	; 0x1598 <USART_TXBuffer_PutByte+0x30>
    157a:	9d 85       	ldd	r25, Y+13	; 0x0d
    157c:	fe 01       	movw	r30, r28
    157e:	e9 0f       	add	r30, r25
    1580:	f1 1d       	adc	r31, r1
    1582:	17 83       	std	Z+7, r17	; 0x07
    1584:	9f 5f       	subi	r25, 0xFF	; 255
    1586:	93 70       	andi	r25, 0x03	; 3
    1588:	9d 87       	std	Y+13, r25	; 0x0d
    158a:	e8 81       	ld	r30, Y
    158c:	f9 81       	ldd	r31, Y+1	; 0x01
    158e:	93 81       	ldd	r25, Z+3	; 0x03
    1590:	2a 81       	ldd	r18, Y+2	; 0x02
    1592:	9c 7f       	andi	r25, 0xFC	; 252
    1594:	92 2b       	or	r25, r18
    1596:	93 83       	std	Z+3, r25	; 0x03
    1598:	df 91       	pop	r29
    159a:	cf 91       	pop	r28
    159c:	1f 91       	pop	r17
    159e:	08 95       	ret

000015a0 <USART_RXBufferData_Available>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
    15a0:	fc 01       	movw	r30, r24
    15a2:	23 85       	ldd	r18, Z+11	; 0x0b
	uint8_t tempTail = usart_data->buffer.RX_Tail;
    15a4:	94 85       	ldd	r25, Z+12	; 0x0c

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	29 13       	cpse	r18, r25
    15aa:	01 c0       	rjmp	.+2      	; 0x15ae <USART_RXBufferData_Available+0xe>
    15ac:	80 e0       	ldi	r24, 0x00	; 0
}
    15ae:	08 95       	ret

000015b0 <USART_RXBuffer_GetByte>:
 *  \param usart_data       The USART_data_t struct instance.
 *
 *  \return         Received data.
 */
uint8_t USART_RXBuffer_GetByte(USART_data_t * usart_data)
{
    15b0:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
    15b2:	84 85       	ldd	r24, Z+12	; 0x0c
    15b4:	df 01       	movw	r26, r30
    15b6:	a8 0f       	add	r26, r24
    15b8:	b1 1d       	adc	r27, r1
    15ba:	13 96       	adiw	r26, 0x03	; 3
    15bc:	8c 91       	ld	r24, X

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
    15be:	94 85       	ldd	r25, Z+12	; 0x0c
    15c0:	9f 5f       	subi	r25, 0xFF	; 255
    15c2:	93 70       	andi	r25, 0x03	; 3
    15c4:	94 87       	std	Z+12, r25	; 0x0c

	return ans;
}
    15c6:	08 95       	ret

000015c8 <USART_RXComplete>:
 *  Stores received data in RX software buffer.
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
bool USART_RXComplete(USART_data_t * usart_data)
{
    15c8:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
    15ca:	93 85       	ldd	r25, Z+11	; 0x0b
    15cc:	9f 5f       	subi	r25, 0xFF	; 255
    15ce:	93 70       	andi	r25, 0x03	; 3

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
    15d0:	84 85       	ldd	r24, Z+12	; 0x0c
	uint8_t data = usart_data->usart->DATA;
    15d2:	a0 81       	ld	r26, Z
    15d4:	b1 81       	ldd	r27, Z+1	; 0x01
    15d6:	2c 91       	ld	r18, X

	if (tempRX_Head == tempRX_Tail) {
    15d8:	98 17       	cp	r25, r24
    15da:	49 f0       	breq	.+18     	; 0x15ee <USART_RXComplete+0x26>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
    15dc:	83 85       	ldd	r24, Z+11	; 0x0b
    15de:	df 01       	movw	r26, r30
    15e0:	a8 0f       	add	r26, r24
    15e2:	b1 1d       	adc	r27, r1
    15e4:	13 96       	adiw	r26, 0x03	; 3
    15e6:	2c 93       	st	X, r18
		usart_data->buffer.RX_Head = tempRX_Head;
    15e8:	93 87       	std	Z+11, r25	; 0x0b
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
    15ee:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
    15f0:	08 95       	ret

000015f2 <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
    15f2:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
    15f4:	96 85       	ldd	r25, Z+14	; 0x0e
	if (bufPtr->TX_Head == tempTX_Tail){
    15f6:	85 85       	ldd	r24, Z+13	; 0x0d
    15f8:	98 13       	cpse	r25, r24
    15fa:	07 c0       	rjmp	.+14     	; 0x160a <USART_DataRegEmpty+0x18>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
    15fc:	01 90       	ld	r0, Z+
    15fe:	f0 81       	ld	r31, Z
    1600:	e0 2d       	mov	r30, r0
    1602:	83 81       	ldd	r24, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
    1604:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
    1606:	83 83       	std	Z+3, r24	; 0x03
    1608:	08 95       	ret

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
    160a:	86 85       	ldd	r24, Z+14	; 0x0e
    160c:	df 01       	movw	r26, r30
    160e:	a8 0f       	add	r26, r24
    1610:	b1 1d       	adc	r27, r1
    1612:	17 96       	adiw	r26, 0x07	; 7
    1614:	8c 91       	ld	r24, X
		usart_data->usart->DATA = data;
    1616:	a0 81       	ld	r26, Z
    1618:	b1 81       	ldd	r27, Z+1	; 0x01
    161a:	8c 93       	st	X, r24

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
    161c:	86 85       	ldd	r24, Z+14	; 0x0e
    161e:	8f 5f       	subi	r24, 0xFF	; 255
    1620:	83 70       	andi	r24, 0x03	; 3
    1622:	86 87       	std	Z+14, r24	; 0x0e
    1624:	08 95       	ret

00001626 <__divsf3>:
    1626:	0e 94 27 0b 	call	0x164e	; 0x164e <__divsf3x>
    162a:	0c 94 08 0c 	jmp	0x1810	; 0x1810 <__fp_round>
    162e:	0e 94 01 0c 	call	0x1802	; 0x1802 <__fp_pscB>
    1632:	58 f0       	brcs	.+22     	; 0x164a <__divsf3+0x24>
    1634:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <__fp_pscA>
    1638:	40 f0       	brcs	.+16     	; 0x164a <__divsf3+0x24>
    163a:	29 f4       	brne	.+10     	; 0x1646 <__divsf3+0x20>
    163c:	5f 3f       	cpi	r21, 0xFF	; 255
    163e:	29 f0       	breq	.+10     	; 0x164a <__divsf3+0x24>
    1640:	0c 94 f1 0b 	jmp	0x17e2	; 0x17e2 <__fp_inf>
    1644:	51 11       	cpse	r21, r1
    1646:	0c 94 3c 0c 	jmp	0x1878	; 0x1878 <__fp_szero>
    164a:	0c 94 f7 0b 	jmp	0x17ee	; 0x17ee <__fp_nan>

0000164e <__divsf3x>:
    164e:	0e 94 19 0c 	call	0x1832	; 0x1832 <__fp_split3>
    1652:	68 f3       	brcs	.-38     	; 0x162e <__divsf3+0x8>

00001654 <__divsf3_pse>:
    1654:	99 23       	and	r25, r25
    1656:	b1 f3       	breq	.-20     	; 0x1644 <__divsf3+0x1e>
    1658:	55 23       	and	r21, r21
    165a:	91 f3       	breq	.-28     	; 0x1640 <__divsf3+0x1a>
    165c:	95 1b       	sub	r25, r21
    165e:	55 0b       	sbc	r21, r21
    1660:	bb 27       	eor	r27, r27
    1662:	aa 27       	eor	r26, r26
    1664:	62 17       	cp	r22, r18
    1666:	73 07       	cpc	r23, r19
    1668:	84 07       	cpc	r24, r20
    166a:	38 f0       	brcs	.+14     	; 0x167a <__divsf3_pse+0x26>
    166c:	9f 5f       	subi	r25, 0xFF	; 255
    166e:	5f 4f       	sbci	r21, 0xFF	; 255
    1670:	22 0f       	add	r18, r18
    1672:	33 1f       	adc	r19, r19
    1674:	44 1f       	adc	r20, r20
    1676:	aa 1f       	adc	r26, r26
    1678:	a9 f3       	breq	.-22     	; 0x1664 <__divsf3_pse+0x10>
    167a:	35 d0       	rcall	.+106    	; 0x16e6 <__divsf3_pse+0x92>
    167c:	0e 2e       	mov	r0, r30
    167e:	3a f0       	brmi	.+14     	; 0x168e <__divsf3_pse+0x3a>
    1680:	e0 e8       	ldi	r30, 0x80	; 128
    1682:	32 d0       	rcall	.+100    	; 0x16e8 <__divsf3_pse+0x94>
    1684:	91 50       	subi	r25, 0x01	; 1
    1686:	50 40       	sbci	r21, 0x00	; 0
    1688:	e6 95       	lsr	r30
    168a:	00 1c       	adc	r0, r0
    168c:	ca f7       	brpl	.-14     	; 0x1680 <__divsf3_pse+0x2c>
    168e:	2b d0       	rcall	.+86     	; 0x16e6 <__divsf3_pse+0x92>
    1690:	fe 2f       	mov	r31, r30
    1692:	29 d0       	rcall	.+82     	; 0x16e6 <__divsf3_pse+0x92>
    1694:	66 0f       	add	r22, r22
    1696:	77 1f       	adc	r23, r23
    1698:	88 1f       	adc	r24, r24
    169a:	bb 1f       	adc	r27, r27
    169c:	26 17       	cp	r18, r22
    169e:	37 07       	cpc	r19, r23
    16a0:	48 07       	cpc	r20, r24
    16a2:	ab 07       	cpc	r26, r27
    16a4:	b0 e8       	ldi	r27, 0x80	; 128
    16a6:	09 f0       	breq	.+2      	; 0x16aa <__divsf3_pse+0x56>
    16a8:	bb 0b       	sbc	r27, r27
    16aa:	80 2d       	mov	r24, r0
    16ac:	bf 01       	movw	r22, r30
    16ae:	ff 27       	eor	r31, r31
    16b0:	93 58       	subi	r25, 0x83	; 131
    16b2:	5f 4f       	sbci	r21, 0xFF	; 255
    16b4:	3a f0       	brmi	.+14     	; 0x16c4 <__divsf3_pse+0x70>
    16b6:	9e 3f       	cpi	r25, 0xFE	; 254
    16b8:	51 05       	cpc	r21, r1
    16ba:	78 f0       	brcs	.+30     	; 0x16da <__divsf3_pse+0x86>
    16bc:	0c 94 f1 0b 	jmp	0x17e2	; 0x17e2 <__fp_inf>
    16c0:	0c 94 3c 0c 	jmp	0x1878	; 0x1878 <__fp_szero>
    16c4:	5f 3f       	cpi	r21, 0xFF	; 255
    16c6:	e4 f3       	brlt	.-8      	; 0x16c0 <__divsf3_pse+0x6c>
    16c8:	98 3e       	cpi	r25, 0xE8	; 232
    16ca:	d4 f3       	brlt	.-12     	; 0x16c0 <__divsf3_pse+0x6c>
    16cc:	86 95       	lsr	r24
    16ce:	77 95       	ror	r23
    16d0:	67 95       	ror	r22
    16d2:	b7 95       	ror	r27
    16d4:	f7 95       	ror	r31
    16d6:	9f 5f       	subi	r25, 0xFF	; 255
    16d8:	c9 f7       	brne	.-14     	; 0x16cc <__divsf3_pse+0x78>
    16da:	88 0f       	add	r24, r24
    16dc:	91 1d       	adc	r25, r1
    16de:	96 95       	lsr	r25
    16e0:	87 95       	ror	r24
    16e2:	97 f9       	bld	r25, 7
    16e4:	08 95       	ret
    16e6:	e1 e0       	ldi	r30, 0x01	; 1
    16e8:	66 0f       	add	r22, r22
    16ea:	77 1f       	adc	r23, r23
    16ec:	88 1f       	adc	r24, r24
    16ee:	bb 1f       	adc	r27, r27
    16f0:	62 17       	cp	r22, r18
    16f2:	73 07       	cpc	r23, r19
    16f4:	84 07       	cpc	r24, r20
    16f6:	ba 07       	cpc	r27, r26
    16f8:	20 f0       	brcs	.+8      	; 0x1702 <__divsf3_pse+0xae>
    16fa:	62 1b       	sub	r22, r18
    16fc:	73 0b       	sbc	r23, r19
    16fe:	84 0b       	sbc	r24, r20
    1700:	ba 0b       	sbc	r27, r26
    1702:	ee 1f       	adc	r30, r30
    1704:	88 f7       	brcc	.-30     	; 0x16e8 <__divsf3_pse+0x94>
    1706:	e0 95       	com	r30
    1708:	08 95       	ret

0000170a <__fixunssfsi>:
    170a:	0e 94 21 0c 	call	0x1842	; 0x1842 <__fp_splitA>
    170e:	88 f0       	brcs	.+34     	; 0x1732 <__fixunssfsi+0x28>
    1710:	9f 57       	subi	r25, 0x7F	; 127
    1712:	98 f0       	brcs	.+38     	; 0x173a <__fixunssfsi+0x30>
    1714:	b9 2f       	mov	r27, r25
    1716:	99 27       	eor	r25, r25
    1718:	b7 51       	subi	r27, 0x17	; 23
    171a:	b0 f0       	brcs	.+44     	; 0x1748 <__fixunssfsi+0x3e>
    171c:	e1 f0       	breq	.+56     	; 0x1756 <__fixunssfsi+0x4c>
    171e:	66 0f       	add	r22, r22
    1720:	77 1f       	adc	r23, r23
    1722:	88 1f       	adc	r24, r24
    1724:	99 1f       	adc	r25, r25
    1726:	1a f0       	brmi	.+6      	; 0x172e <__fixunssfsi+0x24>
    1728:	ba 95       	dec	r27
    172a:	c9 f7       	brne	.-14     	; 0x171e <__fixunssfsi+0x14>
    172c:	14 c0       	rjmp	.+40     	; 0x1756 <__fixunssfsi+0x4c>
    172e:	b1 30       	cpi	r27, 0x01	; 1
    1730:	91 f0       	breq	.+36     	; 0x1756 <__fixunssfsi+0x4c>
    1732:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__fp_zero>
    1736:	b1 e0       	ldi	r27, 0x01	; 1
    1738:	08 95       	ret
    173a:	0c 94 3b 0c 	jmp	0x1876	; 0x1876 <__fp_zero>
    173e:	67 2f       	mov	r22, r23
    1740:	78 2f       	mov	r23, r24
    1742:	88 27       	eor	r24, r24
    1744:	b8 5f       	subi	r27, 0xF8	; 248
    1746:	39 f0       	breq	.+14     	; 0x1756 <__fixunssfsi+0x4c>
    1748:	b9 3f       	cpi	r27, 0xF9	; 249
    174a:	cc f3       	brlt	.-14     	; 0x173e <__fixunssfsi+0x34>
    174c:	86 95       	lsr	r24
    174e:	77 95       	ror	r23
    1750:	67 95       	ror	r22
    1752:	b3 95       	inc	r27
    1754:	d9 f7       	brne	.-10     	; 0x174c <__fixunssfsi+0x42>
    1756:	3e f4       	brtc	.+14     	; 0x1766 <__fixunssfsi+0x5c>
    1758:	90 95       	com	r25
    175a:	80 95       	com	r24
    175c:	70 95       	com	r23
    175e:	61 95       	neg	r22
    1760:	7f 4f       	sbci	r23, 0xFF	; 255
    1762:	8f 4f       	sbci	r24, 0xFF	; 255
    1764:	9f 4f       	sbci	r25, 0xFF	; 255
    1766:	08 95       	ret

00001768 <__floatunsisf>:
    1768:	e8 94       	clt
    176a:	09 c0       	rjmp	.+18     	; 0x177e <__floatsisf+0x12>

0000176c <__floatsisf>:
    176c:	97 fb       	bst	r25, 7
    176e:	3e f4       	brtc	.+14     	; 0x177e <__floatsisf+0x12>
    1770:	90 95       	com	r25
    1772:	80 95       	com	r24
    1774:	70 95       	com	r23
    1776:	61 95       	neg	r22
    1778:	7f 4f       	sbci	r23, 0xFF	; 255
    177a:	8f 4f       	sbci	r24, 0xFF	; 255
    177c:	9f 4f       	sbci	r25, 0xFF	; 255
    177e:	99 23       	and	r25, r25
    1780:	a9 f0       	breq	.+42     	; 0x17ac <__floatsisf+0x40>
    1782:	f9 2f       	mov	r31, r25
    1784:	96 e9       	ldi	r25, 0x96	; 150
    1786:	bb 27       	eor	r27, r27
    1788:	93 95       	inc	r25
    178a:	f6 95       	lsr	r31
    178c:	87 95       	ror	r24
    178e:	77 95       	ror	r23
    1790:	67 95       	ror	r22
    1792:	b7 95       	ror	r27
    1794:	f1 11       	cpse	r31, r1
    1796:	f8 cf       	rjmp	.-16     	; 0x1788 <__floatsisf+0x1c>
    1798:	fa f4       	brpl	.+62     	; 0x17d8 <__floatsisf+0x6c>
    179a:	bb 0f       	add	r27, r27
    179c:	11 f4       	brne	.+4      	; 0x17a2 <__floatsisf+0x36>
    179e:	60 ff       	sbrs	r22, 0
    17a0:	1b c0       	rjmp	.+54     	; 0x17d8 <__floatsisf+0x6c>
    17a2:	6f 5f       	subi	r22, 0xFF	; 255
    17a4:	7f 4f       	sbci	r23, 0xFF	; 255
    17a6:	8f 4f       	sbci	r24, 0xFF	; 255
    17a8:	9f 4f       	sbci	r25, 0xFF	; 255
    17aa:	16 c0       	rjmp	.+44     	; 0x17d8 <__floatsisf+0x6c>
    17ac:	88 23       	and	r24, r24
    17ae:	11 f0       	breq	.+4      	; 0x17b4 <__floatsisf+0x48>
    17b0:	96 e9       	ldi	r25, 0x96	; 150
    17b2:	11 c0       	rjmp	.+34     	; 0x17d6 <__floatsisf+0x6a>
    17b4:	77 23       	and	r23, r23
    17b6:	21 f0       	breq	.+8      	; 0x17c0 <__floatsisf+0x54>
    17b8:	9e e8       	ldi	r25, 0x8E	; 142
    17ba:	87 2f       	mov	r24, r23
    17bc:	76 2f       	mov	r23, r22
    17be:	05 c0       	rjmp	.+10     	; 0x17ca <__floatsisf+0x5e>
    17c0:	66 23       	and	r22, r22
    17c2:	71 f0       	breq	.+28     	; 0x17e0 <__floatsisf+0x74>
    17c4:	96 e8       	ldi	r25, 0x86	; 134
    17c6:	86 2f       	mov	r24, r22
    17c8:	70 e0       	ldi	r23, 0x00	; 0
    17ca:	60 e0       	ldi	r22, 0x00	; 0
    17cc:	2a f0       	brmi	.+10     	; 0x17d8 <__floatsisf+0x6c>
    17ce:	9a 95       	dec	r25
    17d0:	66 0f       	add	r22, r22
    17d2:	77 1f       	adc	r23, r23
    17d4:	88 1f       	adc	r24, r24
    17d6:	da f7       	brpl	.-10     	; 0x17ce <__floatsisf+0x62>
    17d8:	88 0f       	add	r24, r24
    17da:	96 95       	lsr	r25
    17dc:	87 95       	ror	r24
    17de:	97 f9       	bld	r25, 7
    17e0:	08 95       	ret

000017e2 <__fp_inf>:
    17e2:	97 f9       	bld	r25, 7
    17e4:	9f 67       	ori	r25, 0x7F	; 127
    17e6:	80 e8       	ldi	r24, 0x80	; 128
    17e8:	70 e0       	ldi	r23, 0x00	; 0
    17ea:	60 e0       	ldi	r22, 0x00	; 0
    17ec:	08 95       	ret

000017ee <__fp_nan>:
    17ee:	9f ef       	ldi	r25, 0xFF	; 255
    17f0:	80 ec       	ldi	r24, 0xC0	; 192
    17f2:	08 95       	ret

000017f4 <__fp_pscA>:
    17f4:	00 24       	eor	r0, r0
    17f6:	0a 94       	dec	r0
    17f8:	16 16       	cp	r1, r22
    17fa:	17 06       	cpc	r1, r23
    17fc:	18 06       	cpc	r1, r24
    17fe:	09 06       	cpc	r0, r25
    1800:	08 95       	ret

00001802 <__fp_pscB>:
    1802:	00 24       	eor	r0, r0
    1804:	0a 94       	dec	r0
    1806:	12 16       	cp	r1, r18
    1808:	13 06       	cpc	r1, r19
    180a:	14 06       	cpc	r1, r20
    180c:	05 06       	cpc	r0, r21
    180e:	08 95       	ret

00001810 <__fp_round>:
    1810:	09 2e       	mov	r0, r25
    1812:	03 94       	inc	r0
    1814:	00 0c       	add	r0, r0
    1816:	11 f4       	brne	.+4      	; 0x181c <__fp_round+0xc>
    1818:	88 23       	and	r24, r24
    181a:	52 f0       	brmi	.+20     	; 0x1830 <__fp_round+0x20>
    181c:	bb 0f       	add	r27, r27
    181e:	40 f4       	brcc	.+16     	; 0x1830 <__fp_round+0x20>
    1820:	bf 2b       	or	r27, r31
    1822:	11 f4       	brne	.+4      	; 0x1828 <__fp_round+0x18>
    1824:	60 ff       	sbrs	r22, 0
    1826:	04 c0       	rjmp	.+8      	; 0x1830 <__fp_round+0x20>
    1828:	6f 5f       	subi	r22, 0xFF	; 255
    182a:	7f 4f       	sbci	r23, 0xFF	; 255
    182c:	8f 4f       	sbci	r24, 0xFF	; 255
    182e:	9f 4f       	sbci	r25, 0xFF	; 255
    1830:	08 95       	ret

00001832 <__fp_split3>:
    1832:	57 fd       	sbrc	r21, 7
    1834:	90 58       	subi	r25, 0x80	; 128
    1836:	44 0f       	add	r20, r20
    1838:	55 1f       	adc	r21, r21
    183a:	59 f0       	breq	.+22     	; 0x1852 <__fp_splitA+0x10>
    183c:	5f 3f       	cpi	r21, 0xFF	; 255
    183e:	71 f0       	breq	.+28     	; 0x185c <__fp_splitA+0x1a>
    1840:	47 95       	ror	r20

00001842 <__fp_splitA>:
    1842:	88 0f       	add	r24, r24
    1844:	97 fb       	bst	r25, 7
    1846:	99 1f       	adc	r25, r25
    1848:	61 f0       	breq	.+24     	; 0x1862 <__fp_splitA+0x20>
    184a:	9f 3f       	cpi	r25, 0xFF	; 255
    184c:	79 f0       	breq	.+30     	; 0x186c <__fp_splitA+0x2a>
    184e:	87 95       	ror	r24
    1850:	08 95       	ret
    1852:	12 16       	cp	r1, r18
    1854:	13 06       	cpc	r1, r19
    1856:	14 06       	cpc	r1, r20
    1858:	55 1f       	adc	r21, r21
    185a:	f2 cf       	rjmp	.-28     	; 0x1840 <__fp_split3+0xe>
    185c:	46 95       	lsr	r20
    185e:	f1 df       	rcall	.-30     	; 0x1842 <__fp_splitA>
    1860:	08 c0       	rjmp	.+16     	; 0x1872 <__fp_splitA+0x30>
    1862:	16 16       	cp	r1, r22
    1864:	17 06       	cpc	r1, r23
    1866:	18 06       	cpc	r1, r24
    1868:	99 1f       	adc	r25, r25
    186a:	f1 cf       	rjmp	.-30     	; 0x184e <__fp_splitA+0xc>
    186c:	86 95       	lsr	r24
    186e:	71 05       	cpc	r23, r1
    1870:	61 05       	cpc	r22, r1
    1872:	08 94       	sec
    1874:	08 95       	ret

00001876 <__fp_zero>:
    1876:	e8 94       	clt

00001878 <__fp_szero>:
    1878:	bb 27       	eor	r27, r27
    187a:	66 27       	eor	r22, r22
    187c:	77 27       	eor	r23, r23
    187e:	cb 01       	movw	r24, r22
    1880:	97 f9       	bld	r25, 7
    1882:	08 95       	ret

00001884 <__mulsf3>:
    1884:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__mulsf3x>
    1888:	0c 94 08 0c 	jmp	0x1810	; 0x1810 <__fp_round>
    188c:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <__fp_pscA>
    1890:	38 f0       	brcs	.+14     	; 0x18a0 <__mulsf3+0x1c>
    1892:	0e 94 01 0c 	call	0x1802	; 0x1802 <__fp_pscB>
    1896:	20 f0       	brcs	.+8      	; 0x18a0 <__mulsf3+0x1c>
    1898:	95 23       	and	r25, r21
    189a:	11 f0       	breq	.+4      	; 0x18a0 <__mulsf3+0x1c>
    189c:	0c 94 f1 0b 	jmp	0x17e2	; 0x17e2 <__fp_inf>
    18a0:	0c 94 f7 0b 	jmp	0x17ee	; 0x17ee <__fp_nan>
    18a4:	11 24       	eor	r1, r1
    18a6:	0c 94 3c 0c 	jmp	0x1878	; 0x1878 <__fp_szero>

000018aa <__mulsf3x>:
    18aa:	0e 94 19 0c 	call	0x1832	; 0x1832 <__fp_split3>
    18ae:	70 f3       	brcs	.-36     	; 0x188c <__mulsf3+0x8>

000018b0 <__mulsf3_pse>:
    18b0:	95 9f       	mul	r25, r21
    18b2:	c1 f3       	breq	.-16     	; 0x18a4 <__mulsf3+0x20>
    18b4:	95 0f       	add	r25, r21
    18b6:	50 e0       	ldi	r21, 0x00	; 0
    18b8:	55 1f       	adc	r21, r21
    18ba:	62 9f       	mul	r22, r18
    18bc:	f0 01       	movw	r30, r0
    18be:	72 9f       	mul	r23, r18
    18c0:	bb 27       	eor	r27, r27
    18c2:	f0 0d       	add	r31, r0
    18c4:	b1 1d       	adc	r27, r1
    18c6:	63 9f       	mul	r22, r19
    18c8:	aa 27       	eor	r26, r26
    18ca:	f0 0d       	add	r31, r0
    18cc:	b1 1d       	adc	r27, r1
    18ce:	aa 1f       	adc	r26, r26
    18d0:	64 9f       	mul	r22, r20
    18d2:	66 27       	eor	r22, r22
    18d4:	b0 0d       	add	r27, r0
    18d6:	a1 1d       	adc	r26, r1
    18d8:	66 1f       	adc	r22, r22
    18da:	82 9f       	mul	r24, r18
    18dc:	22 27       	eor	r18, r18
    18de:	b0 0d       	add	r27, r0
    18e0:	a1 1d       	adc	r26, r1
    18e2:	62 1f       	adc	r22, r18
    18e4:	73 9f       	mul	r23, r19
    18e6:	b0 0d       	add	r27, r0
    18e8:	a1 1d       	adc	r26, r1
    18ea:	62 1f       	adc	r22, r18
    18ec:	83 9f       	mul	r24, r19
    18ee:	a0 0d       	add	r26, r0
    18f0:	61 1d       	adc	r22, r1
    18f2:	22 1f       	adc	r18, r18
    18f4:	74 9f       	mul	r23, r20
    18f6:	33 27       	eor	r19, r19
    18f8:	a0 0d       	add	r26, r0
    18fa:	61 1d       	adc	r22, r1
    18fc:	23 1f       	adc	r18, r19
    18fe:	84 9f       	mul	r24, r20
    1900:	60 0d       	add	r22, r0
    1902:	21 1d       	adc	r18, r1
    1904:	82 2f       	mov	r24, r18
    1906:	76 2f       	mov	r23, r22
    1908:	6a 2f       	mov	r22, r26
    190a:	11 24       	eor	r1, r1
    190c:	9f 57       	subi	r25, 0x7F	; 127
    190e:	50 40       	sbci	r21, 0x00	; 0
    1910:	9a f0       	brmi	.+38     	; 0x1938 <__mulsf3_pse+0x88>
    1912:	f1 f0       	breq	.+60     	; 0x1950 <__mulsf3_pse+0xa0>
    1914:	88 23       	and	r24, r24
    1916:	4a f0       	brmi	.+18     	; 0x192a <__mulsf3_pse+0x7a>
    1918:	ee 0f       	add	r30, r30
    191a:	ff 1f       	adc	r31, r31
    191c:	bb 1f       	adc	r27, r27
    191e:	66 1f       	adc	r22, r22
    1920:	77 1f       	adc	r23, r23
    1922:	88 1f       	adc	r24, r24
    1924:	91 50       	subi	r25, 0x01	; 1
    1926:	50 40       	sbci	r21, 0x00	; 0
    1928:	a9 f7       	brne	.-22     	; 0x1914 <__mulsf3_pse+0x64>
    192a:	9e 3f       	cpi	r25, 0xFE	; 254
    192c:	51 05       	cpc	r21, r1
    192e:	80 f0       	brcs	.+32     	; 0x1950 <__mulsf3_pse+0xa0>
    1930:	0c 94 f1 0b 	jmp	0x17e2	; 0x17e2 <__fp_inf>
    1934:	0c 94 3c 0c 	jmp	0x1878	; 0x1878 <__fp_szero>
    1938:	5f 3f       	cpi	r21, 0xFF	; 255
    193a:	e4 f3       	brlt	.-8      	; 0x1934 <__mulsf3_pse+0x84>
    193c:	98 3e       	cpi	r25, 0xE8	; 232
    193e:	d4 f3       	brlt	.-12     	; 0x1934 <__mulsf3_pse+0x84>
    1940:	86 95       	lsr	r24
    1942:	77 95       	ror	r23
    1944:	67 95       	ror	r22
    1946:	b7 95       	ror	r27
    1948:	f7 95       	ror	r31
    194a:	e7 95       	ror	r30
    194c:	9f 5f       	subi	r25, 0xFF	; 255
    194e:	c1 f7       	brne	.-16     	; 0x1940 <__mulsf3_pse+0x90>
    1950:	fe 2b       	or	r31, r30
    1952:	88 0f       	add	r24, r24
    1954:	91 1d       	adc	r25, r1
    1956:	96 95       	lsr	r25
    1958:	87 95       	ror	r24
    195a:	97 f9       	bld	r25, 7
    195c:	08 95       	ret

0000195e <__udivmodhi4>:
    195e:	aa 1b       	sub	r26, r26
    1960:	bb 1b       	sub	r27, r27
    1962:	51 e1       	ldi	r21, 0x11	; 17
    1964:	07 c0       	rjmp	.+14     	; 0x1974 <__udivmodhi4_ep>

00001966 <__udivmodhi4_loop>:
    1966:	aa 1f       	adc	r26, r26
    1968:	bb 1f       	adc	r27, r27
    196a:	a6 17       	cp	r26, r22
    196c:	b7 07       	cpc	r27, r23
    196e:	10 f0       	brcs	.+4      	; 0x1974 <__udivmodhi4_ep>
    1970:	a6 1b       	sub	r26, r22
    1972:	b7 0b       	sbc	r27, r23

00001974 <__udivmodhi4_ep>:
    1974:	88 1f       	adc	r24, r24
    1976:	99 1f       	adc	r25, r25
    1978:	5a 95       	dec	r21
    197a:	a9 f7       	brne	.-22     	; 0x1966 <__udivmodhi4_loop>
    197c:	80 95       	com	r24
    197e:	90 95       	com	r25
    1980:	bc 01       	movw	r22, r24
    1982:	cd 01       	movw	r24, r26
    1984:	08 95       	ret

00001986 <__udivmodsi4>:
    1986:	a1 e2       	ldi	r26, 0x21	; 33
    1988:	1a 2e       	mov	r1, r26
    198a:	aa 1b       	sub	r26, r26
    198c:	bb 1b       	sub	r27, r27
    198e:	fd 01       	movw	r30, r26
    1990:	0d c0       	rjmp	.+26     	; 0x19ac <__udivmodsi4_ep>

00001992 <__udivmodsi4_loop>:
    1992:	aa 1f       	adc	r26, r26
    1994:	bb 1f       	adc	r27, r27
    1996:	ee 1f       	adc	r30, r30
    1998:	ff 1f       	adc	r31, r31
    199a:	a2 17       	cp	r26, r18
    199c:	b3 07       	cpc	r27, r19
    199e:	e4 07       	cpc	r30, r20
    19a0:	f5 07       	cpc	r31, r21
    19a2:	20 f0       	brcs	.+8      	; 0x19ac <__udivmodsi4_ep>
    19a4:	a2 1b       	sub	r26, r18
    19a6:	b3 0b       	sbc	r27, r19
    19a8:	e4 0b       	sbc	r30, r20
    19aa:	f5 0b       	sbc	r31, r21

000019ac <__udivmodsi4_ep>:
    19ac:	66 1f       	adc	r22, r22
    19ae:	77 1f       	adc	r23, r23
    19b0:	88 1f       	adc	r24, r24
    19b2:	99 1f       	adc	r25, r25
    19b4:	1a 94       	dec	r1
    19b6:	69 f7       	brne	.-38     	; 0x1992 <__udivmodsi4_loop>
    19b8:	60 95       	com	r22
    19ba:	70 95       	com	r23
    19bc:	80 95       	com	r24
    19be:	90 95       	com	r25
    19c0:	9b 01       	movw	r18, r22
    19c2:	ac 01       	movw	r20, r24
    19c4:	bd 01       	movw	r22, r26
    19c6:	cf 01       	movw	r24, r30
    19c8:	08 95       	ret

000019ca <__tablejump2__>:
    19ca:	ee 0f       	add	r30, r30
    19cc:	ff 1f       	adc	r31, r31
    19ce:	88 1f       	adc	r24, r24
    19d0:	8b bf       	out	0x3b, r24	; 59
    19d2:	07 90       	elpm	r0, Z+
    19d4:	f6 91       	elpm	r31, Z
    19d6:	e0 2d       	mov	r30, r0
    19d8:	1b be       	out	0x3b, r1	; 59
    19da:	19 94       	eijmp

000019dc <__umulhisi3>:
    19dc:	a2 9f       	mul	r26, r18
    19de:	b0 01       	movw	r22, r0
    19e0:	b3 9f       	mul	r27, r19
    19e2:	c0 01       	movw	r24, r0
    19e4:	a3 9f       	mul	r26, r19
    19e6:	70 0d       	add	r23, r0
    19e8:	81 1d       	adc	r24, r1
    19ea:	11 24       	eor	r1, r1
    19ec:	91 1d       	adc	r25, r1
    19ee:	b2 9f       	mul	r27, r18
    19f0:	70 0d       	add	r23, r0
    19f2:	81 1d       	adc	r24, r1
    19f4:	11 24       	eor	r1, r1
    19f6:	91 1d       	adc	r25, r1
    19f8:	08 95       	ret

000019fa <strcat>:
    19fa:	fb 01       	movw	r30, r22
    19fc:	dc 01       	movw	r26, r24
    19fe:	0d 90       	ld	r0, X+
    1a00:	00 20       	and	r0, r0
    1a02:	e9 f7       	brne	.-6      	; 0x19fe <strcat+0x4>
    1a04:	11 97       	sbiw	r26, 0x01	; 1
    1a06:	01 90       	ld	r0, Z+
    1a08:	0d 92       	st	X+, r0
    1a0a:	00 20       	and	r0, r0
    1a0c:	e1 f7       	brne	.-8      	; 0x1a06 <strcat+0xc>
    1a0e:	08 95       	ret

00001a10 <strcpy>:
    1a10:	fb 01       	movw	r30, r22
    1a12:	dc 01       	movw	r26, r24
    1a14:	01 90       	ld	r0, Z+
    1a16:	0d 92       	st	X+, r0
    1a18:	00 20       	and	r0, r0
    1a1a:	e1 f7       	brne	.-8      	; 0x1a14 <strcpy+0x4>
    1a1c:	08 95       	ret

00001a1e <__itoa_ncheck>:
    1a1e:	bb 27       	eor	r27, r27
    1a20:	4a 30       	cpi	r20, 0x0A	; 10
    1a22:	31 f4       	brne	.+12     	; 0x1a30 <__itoa_ncheck+0x12>
    1a24:	99 23       	and	r25, r25
    1a26:	22 f4       	brpl	.+8      	; 0x1a30 <__itoa_ncheck+0x12>
    1a28:	bd e2       	ldi	r27, 0x2D	; 45
    1a2a:	90 95       	com	r25
    1a2c:	81 95       	neg	r24
    1a2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a30:	0c 94 1b 0d 	jmp	0x1a36	; 0x1a36 <__utoa_common>

00001a34 <__utoa_ncheck>:
    1a34:	bb 27       	eor	r27, r27

00001a36 <__utoa_common>:
    1a36:	fb 01       	movw	r30, r22
    1a38:	55 27       	eor	r21, r21
    1a3a:	aa 27       	eor	r26, r26
    1a3c:	88 0f       	add	r24, r24
    1a3e:	99 1f       	adc	r25, r25
    1a40:	aa 1f       	adc	r26, r26
    1a42:	a4 17       	cp	r26, r20
    1a44:	10 f0       	brcs	.+4      	; 0x1a4a <__utoa_common+0x14>
    1a46:	a4 1b       	sub	r26, r20
    1a48:	83 95       	inc	r24
    1a4a:	50 51       	subi	r21, 0x10	; 16
    1a4c:	b9 f7       	brne	.-18     	; 0x1a3c <__utoa_common+0x6>
    1a4e:	a0 5d       	subi	r26, 0xD0	; 208
    1a50:	aa 33       	cpi	r26, 0x3A	; 58
    1a52:	08 f0       	brcs	.+2      	; 0x1a56 <__utoa_common+0x20>
    1a54:	a9 5d       	subi	r26, 0xD9	; 217
    1a56:	a1 93       	st	Z+, r26
    1a58:	00 97       	sbiw	r24, 0x00	; 0
    1a5a:	79 f7       	brne	.-34     	; 0x1a3a <__utoa_common+0x4>
    1a5c:	b1 11       	cpse	r27, r1
    1a5e:	b1 93       	st	Z+, r27
    1a60:	11 92       	st	Z+, r1
    1a62:	cb 01       	movw	r24, r22
    1a64:	0c 94 34 0d 	jmp	0x1a68	; 0x1a68 <strrev>

00001a68 <strrev>:
    1a68:	dc 01       	movw	r26, r24
    1a6a:	fc 01       	movw	r30, r24
    1a6c:	67 2f       	mov	r22, r23
    1a6e:	71 91       	ld	r23, Z+
    1a70:	77 23       	and	r23, r23
    1a72:	e1 f7       	brne	.-8      	; 0x1a6c <strrev+0x4>
    1a74:	32 97       	sbiw	r30, 0x02	; 2
    1a76:	04 c0       	rjmp	.+8      	; 0x1a80 <strrev+0x18>
    1a78:	7c 91       	ld	r23, X
    1a7a:	6d 93       	st	X+, r22
    1a7c:	70 83       	st	Z, r23
    1a7e:	62 91       	ld	r22, -Z
    1a80:	ae 17       	cp	r26, r30
    1a82:	bf 07       	cpc	r27, r31
    1a84:	c8 f3       	brcs	.-14     	; 0x1a78 <strrev+0x10>
    1a86:	08 95       	ret

00001a88 <_exit>:
    1a88:	f8 94       	cli

00001a8a <__stop_program>:
    1a8a:	ff cf       	rjmp	.-2      	; 0x1a8a <__stop_program>
